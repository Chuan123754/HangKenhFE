﻿@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json
@inject IUserService userService
@inject IProductAttributeServies productAttributeServices
@inject ICartService cartServices
@inject ICartDetailsService cartDetailServices
@inject IOrderIServices orderServices
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager navigation
@inject IPostSer sev
@inject IJSRuntime JS
@using BlazorBootstrap
@using HangKenhFE.Models
@inject ILoginService LoginServices

<style>
    .modal {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        display: none;
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border-radius: 8px;
        width: 80%;
        max-width: 900px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    button {
        margin: 5px;
    }
    .close {
        color: #aaa;
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover, .close:focus {
            color: #000;
            text-decoration: none;
        }

    /* Layout Styles */
    .account-container {
        display: flex;
        gap: 20px;
    }

    .col2-set {
        display: flex;
        width: 100%;
        justify-content: space-between;
    }

    .col-1, .col-2 {
        flex: 1;
        padding: 20px;
        box-sizing: border-box;
    }

    h3 {
        font-size: 24px;
        margin-bottom: 20px;
    }

    /* Form Styles */
    form label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    form input[type="text"],
    form input[type="email"],
    form input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .form-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .forgot-password {
        color: #007bff;
        text-decoration: none;
    }

        .forgot-password:hover {
            text-decoration: underline;
        }

    .btn-login, .btn-register {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        color: #fff;
        background-color: #000;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

        .btn-login:hover, .btn-register:hover {
            background-color: #333;
        }

    .login-banner {
        margin-top: 20px;
        width: 100%;
        border-radius: 8px;
        box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.25);
    }

    .privacy-notice {
        background: #eee;
        border: 1px solid #ccc;
        padding: 10px;
        font-size: 14px;
        color: #333;
        margin-bottom: 15px;
        border-radius: 4px;
    }

    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-menu {
        display: none; /* Mặc định ẩn */
        position: absolute;
        top: 100%;
        left: 0;
        width: 200px;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        list-style-type: none;
        padding: 10px;
        margin: 0;
        border-radius: 4px;
        z-index: 1000;
    }

        .dropdown-menu li {
            padding: 8px 12px;
            cursor: pointer;
        }

            .dropdown-menu li a {
                text-decoration: none;
                color: black;
                display: block;
            }

            .dropdown-menu li:hover {
                background-color: #f1f1f1;
            }



    /*Model Login*/

    .modal {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
        display: none;
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border-radius: 8px;
        width: 80%;
        max-width: 900px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .close {
        color: #aaa;
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover, .close:focus {
            color: #000;
            text-decoration: none;
        }

    /* Layout Styles */
    .account-container {
        display: flex;
        gap: 20px;
    }

    .col2-set {
        display: flex;
        width: 100%;
        justify-content: space-between;
    }

    .col-1, .col-2 {
        flex: 1;
        padding: 20px;
        box-sizing: border-box;
    }

    h3 {
        font-size: 24px;
        margin-bottom: 20px;
    }

    /* Form Styles */
    form label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }

    form input[type="text"],
    form input[type="email"],
    form input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .form-options {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .forgot-password {
        color: #007bff;
        text-decoration: none;
    }

        .forgot-password:hover {
            text-decoration: underline;
        }

    .btn-login, .btn-register {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
        color: #fff;
        background-color: #000;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

        .btn-login:hover, .btn-register:hover {
            background-color: #333;
        }

    .login-banner {
        margin-top: 20px;
        width: 100%;
        border-radius: 8px;
        box-shadow: 0px 2px 7px rgba(0, 0, 0, 0.25);
    }

    .privacy-notice {
        background: #eee;
        border: 1px solid #ccc;
        padding: 10px;
        font-size: 14px;
        color: #333;
        margin-bottom: 15px;
        border-radius: 4px;
    }

</style>






<div class="modal" style="@(isModalOpen ? "display: block;" : "display: none;")">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <!-- Form Đăng nhập và Đăng ký -->
        <div class="account-container">
            <div class="col2-set" id="customer_login">
                <!-- Form Đăng nhập -->
                <div class="col-1">
                    <h3>Đăng nhập</h3>
                    <form @onsubmit="HandleLoginAsync">
                        <p class="message">@loginMessage</p> <!-- Thông báo đăng nhập -->
                        <label for="username">Nhập email của bạn *</label>
                        <input type="text" @bind="loginModel.Username" id="username" placeholder="Nhập email" required>

                        <label for="password">Mật khẩu *</label>
                        <input type="password" @bind="loginModel.Password" id="password" placeholder="Mật khẩu" required>

                        <div class="form-options">                       
                            <a @onclick="NavigateToForgotPassword" class="forgot-password">Quên mật khẩu?</a>
                        </div>

                        <button type="submit" class="btn-login">Đăng nhập</button>

                        <img src="https://thamlenhangkenh.com/wp-content/uploads/2024/06/login-banner.png" alt="Banner" class="login-banner">
                    </form>
                </div>

                <div class="col-2">
                    <h3>Đăng ký</h3>
                    <form @onsubmit="HandleRegisterAsync">
                        <p class="message">@registerMessage</p>
                        <label for="reg_email">Email *</label>
                        <input type="email" @bind="registerModel.Email" id="reg_email" placeholder="Nhập e-mail" required>

                        <label for="reg_password">Mật khẩu *</label>
                        <input type="password" @bind="registerModel.Password" id="reg_password" placeholder="Nhập mật khẩu" required>

                        <label for="reg_confirm_password">Xác nhận mật khẩu *</label>
                        <input type="password" @bind="registerModel.ConfirmPassword" id="reg_confirm_password" placeholder="Xác nhận mật khẩu" required>

                        <label for="reg_phone">Số điện thoại *</label>
                        <input type="text" @bind="registerModel.Phone" id="reg_phone" placeholder="Nhập số điện thoại"
                               disabled="@registerModel.IsPhoneDisabled" required>

                        <button type="button" class="btn btn-secondary mt-2" @onclick="SendOtp" style="width: 100%;">Gửi OTP</button>

                        <div class="form-group mt-3">
                            <label for="reg_otp">Nhập OTP *</label>
                            <input type="text" @bind="registerModel.OTP" id="reg_otp" placeholder="Nhập OTP" class="form-control" required>
                        </div>

                        <p class="privacy-notice">
                            Dữ liệu cá nhân của bạn sẽ được sử dụng để hỗ trợ trải nghiệm của bạn trên toàn bộ trang web này.
                            Để quản lý quyền truy cập vào tài khoản và cho các mục đích khác được mô tả trong privacy policy.
                        </p>

                        <button type="submit" class="btn-register">Đăng ký</button>
                    </form>
                </div>

                @if (showOtpReminderModal)
                {
                    <div class="modal" style="display: block;">
                        <div class="modal-content" style="width: 650px; margin-top: 200px; padding: 30px; position: relative;">
                            <span class="close" style="position: absolute; top: 10px; right: 15px; font-size: 24px; cursor: pointer;" @onclick="CloseOtpReminderModal">&times;</span>

                            <div class="otp-reminder-modal">
                                <div class="otp-reminder-modal-content">
                                    <h3 class="text-danger text-center">Thông báo quan trọng</h3>
                                    <p>Chúng tôi có chức năng <strong class="text-danger">đồng bộ thông tin qua số điện thoại</strong>. Điều này sẽ giúp bạn có thông tin về Hóa đơn bạn <strong>Đã thanh toán</strong> tại quầy ở cửa hàng của chúng tôi. Vui lòng nhập số điện thoại <strong class="text-danger">đã đăng ký tại quầy (nếu có)</strong>.</p>
                                    Còn nếu bạn chưa từng mua sắn tại của hàng của chúng tôi thì bạn chỉ cần xác thực <strong>OTP</strong> bình thường.
                                    <hr />
                                    <p>
                                        <span class="text-danger">Lưu ý:</span> Số điện thoại chỉ được xác thực <strong>1 lần duy nhất</strong> và <strong class="text-danger">không thể hoàn tác</strong>. Số điện thoại phải là số thực. Điều này sẽ đảm bảo quyền lợi của bạn khi mua sắm tại cửa hàng của chúng tôi. <br /> Bạn có thắc mắc gì vui lòng <a href="/faq" target="_blank" class="text-primary">nhấn vào đây</a>.
                                    </p>                               
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(generatedOtp))
                            {
                                <div class="text-center mt-4">
                                    <p class="text-success" style="font-size: 18px; font-weight: bold;">
                                        Mã OTP của bạn (Giả lập): <strong>@generatedOtp</strong>
                                    </p>
                                </div>
                            }
                            <div class="text-center mt-4">
                                <button class="btn btn-primary" @onclick="CloseOtpReminderModal">Gửi OTP</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>










<header class="header">
    <div class="logo middle-header border-bottom pc">
        <a href="/">
            <h1>
                <img src="/main/assets/images/Logo_HANGKENH_26-03-01.svg"
                     class="img-logo" style="width: 222px; height:88px" alt="hangkenh">
            </h1>
        </a>
    </div>
    <div class="bottom-header pc" style="height: 52px">
        <div class="container">
            <nav class="navbar navbar-expand-lg p-0 h-100 d-block">
                <div class="collapse navbar-collapse justify-content-between flex-grow-0 h-100" id="navbarNav">
                    <ul class="navbar-nav quick-access h-100 mt-2 justify-content-around w-100">
                        <li class="nav-item">
                            <a href="/introduce" class="text-decoration-none nav-link">Giới thiệu</a>
                        </li>
                        <li class="nav-item">
                            <a href="/category" class="text-decoration-none nav-link">Sản phẩm</a>
                        </li>
                        <li class="nav-item">
                            <a href="/project" class="text-decoration-none nav-link">LAB & Dự án</a>
                        </li>
                        <li class="nav-item">
                            <a href="/designer" class="text-decoration-none nav-link">Nhà thiết kế</a>
                        </li>
                        <li class="nav-item">
                            <a href="/blogs" class="text-decoration-none nav-link">Blogs</a>
                        </li>
                        <li class="nav-item">
                            <a href="/contact" class="text-decoration-none nav-link">Liên hệ</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav quick-action h-100">
                        <li class="nav-item">
                            <a href="javascript:void(0)" data-bs-toggle="collapse" data-bs-target="#dropdownMenu">
                                <svg width="28" height="14" viewBox="0 0 28 14" fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path d="M0.628906 0.765625H27.3718" stroke="#242424" stroke-width="1.54286" />
                                    <path d="M0.628906 6.9375H27.3718" stroke="#242424" stroke-width="1.54286" />
                                    <path d="M0.628906 13.1094H27.3718" stroke="#242424" stroke-width="1.54286" />

                                </svg>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="/wishlist">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <g clip-path="url(#clip0_1223_8762)">
                                        <path d="M14.8325 2.3202C14.0433 1.42477 12.9486 0.931641 11.7499 0.931641C10.064 0.931641 8.99666 1.93852 8.39816 2.7832C8.24288 3.00239 8.11078 3.22217 7.99988 3.42898C7.88897 3.22217 7.75691 3.00239 7.6016 2.7832C7.0031 1.93852 5.93575 0.931641 4.24988 0.931641C3.05119 0.931641 1.95641 1.4248 1.16722 2.32023C0.414472 3.17442 -0.00012207 4.31842 -0.00012207 5.54148C-0.00012207 6.87283 0.519659 8.11111 1.63566 9.43836C2.63307 10.6246 4.06797 11.8474 5.72957 13.2633C6.34872 13.7909 6.989 14.3365 7.67066 14.9329L7.69113 14.9509C7.7795 15.0282 7.88969 15.0669 7.99988 15.0669C8.11007 15.0669 8.22025 15.0282 8.30863 14.9509L8.3291 14.9329C9.01075 14.3365 9.65103 13.7909 10.2703 13.2632C11.9318 11.8474 13.3667 10.6246 14.3641 9.43836C15.4801 8.11108 15.9999 6.87283 15.9999 5.54148C15.9999 4.31842 15.5853 3.17442 14.8325 2.3202ZM9.66216 12.5497C9.12841 13.0045 8.5791 13.4726 7.99988 13.9761C7.42069 13.4727 6.87135 13.0045 6.3375 12.5496C3.08566 9.77861 0.937378 7.94795 0.937378 5.54148C0.937378 4.5468 1.26878 3.62292 1.87057 2.94008C2.47925 2.24948 3.32422 1.86914 4.24988 1.86914C5.53516 1.86914 6.366 2.66095 6.83663 3.3252C7.25878 3.92095 7.47907 4.52152 7.55419 4.75205C7.61703 4.94502 7.79694 5.07561 7.99988 5.07561C8.20282 5.07561 8.38272 4.94502 8.44557 4.75205C8.52069 4.52152 8.74097 3.92095 9.16313 3.32517C9.63375 2.66095 10.4646 1.86914 11.7499 1.86914C12.6755 1.86914 13.5205 2.24948 14.1292 2.94008C14.731 3.62292 15.0624 4.5468 15.0624 5.54148C15.0624 7.94795 12.9141 9.77861 9.66216 12.5497Z"
                                              fill="#242424" />
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_1223_8762">
                                            <rect width="16" height="16" fill="white" />
                                        </clipPath>
                                    </defs>
                                </svg>
                            </a>
                        </li>
                        <li class="dropdown" id="doww">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="0.9" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-user-circle" @onclick="ToggleDropdown">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0" />
                                <path d="M12 10m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0" />
                                <path d="M6.168 18.849a4 4 0 0 1 3.832 -2.849h4a4 4 0 0 1 3.834 2.855" />
                            </svg>
                            <ul class="dropdown-menu" style="@MenuStyle">
                                <li>
                                    @if (isLoggedIn && !string.IsNullOrEmpty(users.Name))
                                    {
                                        <span>Chào, @users.Name</span>
                                    }
                                    else
                                    {
                                        <span>Khách</span>
                                    }
                                </li>
                                <li>
                                    <a href="/user/orders" @onclick="CloseDropdown">Đơn hàng của bạn</a>
                                </li>
                                <li>
                                    @if (isLoggedIn)
                                    {
                                        <a class="btn-logout" @onclick="@(async () => { await Logout(); CloseDropdown(); })">Đăng xuất</a>
                                    }
                                    else
                                    {
                                        <a @onclick="@(async () => { OpenModal(); CloseDropdown(); })">Đăng nhập / Đăng ký</a>
                                    }
                                </li>
                                <li><a @onclick="NavigateToUser">Thông tin cá nhân</a></li>
                            </ul>
                        </li>


                        <li>
                            <a @onclick="NavToCart" class="cart-link" style="text-decoration: none; color: inherit;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="0.9" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-shopping-cart"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M6 19m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M17 19m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M17 17h-11v-14h-2" /><path d="M6 5l14 1l-1 7h-13" /></svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>
            @if (showSyncCartModal)
            {
                <div class="modal" style="display:block;">
                    <div class="modal-content" style="width:650px; margin-top:200px; padding:30px; position:relative;">
                        <h3 style="text-align: center; font-size: 24px; margin-bottom: 20px;">Đồng bộ giỏ hàng</h3>
                        <p style="text-align: justify; line-height: 1.6;">
                            Bạn có muốn đồng bộ giỏ hàng hiện tại với tài khoản của mình không?
                        </p>
                        <hr />
                        <p style="text-align: justify; line-height: 1.6; font-size: 14px; color: #555;">
                            <span style="color:red; font-weight:bold;">Lưu ý:</span>
                            Các sản phẩm trong giỏ hàng sẽ chỉ được đồng bộ <strong style="color:red;">duy nhất 1 lần</strong> và không thể hoàn tác.
                            <strong style="color:red;">Hãy chắc chắn về hành động này.</strong> Các hóa đơn
                            <strong style="color:blue;">"Pending"</strong> sẽ không được đồng bộ và sẽ <strong style="color:red;">xóa</strong> ngay khi quá trình này thực hiện. Bạn có thắc mắc gì vui lòng
                            <a href="/faq" class="text-primary">nhấn vào đây</a>.
                        </p>
                        <div style="text-align: center; margin-top: 30px;">
                            <button @onclick="ConfirmSyncCart" class="btn btn-success" style="width: 150px; margin: 0 10px; font-size: 16px;">Đồng ý</button>
                            <button @onclick="CancelSyncCart" class="btn btn-danger" style="width: 150px; margin: 0 10px; font-size: 16px;">Hủy</button>
                        </div>
                    </div>
                </div>

            }
        </div>
        <Modal IsModalOpen="ModalService.IsModalOpen" IsModalOpenChanged="HandleModalChange" />
        <div class="menu-dropdown collapse p-4 position-absolute w-100" id="dropdownMenu" style="z-index: 999">
            <div class="container">

                <div class="row">
                    <div class="col-9 ">
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item in page_list.Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item.Slug)" class="title-sub-menu">@item.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                        <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item1 in page_list.Skip(4).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item1.Slug)" class="title-sub-menu">@item1.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                        <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item2 in page_list.Skip(8).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item2.Slug)" class="title-sub-menu">@item2.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                          <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item3 in page_list.Skip(12).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item3.Slug)" class="title-sub-menu">@item3.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                        <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item1 in page_list.Skip(16).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item1.Slug)" class="title-sub-menu">@item1.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                          <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item1 in page_list.Skip(20).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item1.Slug)" class="title-sub-menu">@item1.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                          <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item1 in page_list.Skip(24).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item1.Slug)" class="title-sub-menu">@item1.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                          <br />
                        <div class="d-flex" style="gap: 100px;">
                            @foreach (var item1 in page_list.Skip(28).Take(4).ToList())
                            {
                                <div class="col">
                                    <ul>
                                        <li>
                                            <a @onclick="() => NavDetailsPage(item1.Slug)" class="title-sub-menu">@item1.Title</a>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                      
                    </div>
                    <div class="col-3 ">
                        <div class="col">
                            <ul>
                                <li>
                                    <img src="main/assets/images/van-phong-hn.jpg">
                                </li>
                                <li>
                                    <div class="text-dark">Project by NTK Xuân Dũng</div>
                                </li>
                                <li>
                                    <div>Photo: DucChuan</div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>


                


            </div>
        </div>

    </div>

</header>



@code {
    private bool isLoggedIn = false;
    private bool IsMenuOpen { get; set; } = false;
    private Users users = new Users();
    private List<Product_Posts> page_list = new List<Product_Posts>();
    private bool isInitialized = false;
    [CascadingParameter] private bool IsPrerendering { get; set; }
    private bool isPrerendering = true;
    private bool showError = false;

    private bool isModalOpen = false;

    private LoginModel loginModel = new LoginModel();
    private RegisterModel registerModel = new RegisterModel();

    private string loginMessage = string.Empty;
    private string registerMessage = string.Empty;
    private bool firstRender = true;

    private bool showSyncCartModal = false; 
    private long currentUserId; 

    private bool showOtpReminderModal = false; 
    private string generatedOtp;              
    private string otpError;                  
    private bool otpSent = false; 

    private async Task<bool> ShowConfirmation(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }

    private async Task ShowToast(string type, string message)
    {
        switch (type)
        {
            case "success":
                await JS.InvokeVoidAsync("toastr.success", message);
                break;
            case "error":
                await JS.InvokeVoidAsync("toastr.error", message);
                break;
            case "warning":
                await JS.InvokeVoidAsync("toastr.warning", message);
                break;
            case "info":
                await JS.InvokeVoidAsync("toastr.info", message);
                break;
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var tokenAuto = await SessionStorage.GetItemAsStringAsync("RememberToken");
        if (!string.IsNullOrEmpty(tokenAuto))
        {
            var loggedInUser = await userService.AutoLogin(tokenAuto);
            if (loggedInUser != null)
            {
                isLoggedIn = true;
            }
        }

        if (firstRender)
        {
            var token = await SessionStorage.GetItemAsStringAsync("user");
            if (!string.IsNullOrEmpty(token))
            {
                isLoggedIn = true;
            }

            // Cập nhật trạng thái để không chạy lại trong các lần render sau
            this.firstRender = false;
            StateHasChanged();
        }
    }

    private void OpenModal()
    {
        isModalOpen = true;
    }

    private void CloseModal()
    {
        isModalOpen = false;
        loginMessage = string.Empty;
        registerMessage = string.Empty;
    }

    private async Task HandleLoginAsync()
    {
        try
        {
            var loginRequest = new Users
                {
                    Email = loginModel.Username,
                    Password = loginModel.Password
                };

            var loggedInUser = await userService.Login(loginRequest, loginModel.RememberMe);

            if (loggedInUser != null)
            {
                await ShowToast("success", "Đăng nhập thành công");

                currentUserId = loggedInUser.Id;
                await SessionStorage.SetItemAsStringAsync("user", JsonConvert.SerializeObject(loggedInUser));

                var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
                if (!string.IsNullOrEmpty(cartJson))
                {
                    // Deserialize cartJson to check if it contains any items
                    var cartList = JsonConvert.DeserializeObject<List<CartProduct>>(cartJson);
                    if (cartList != null && cartList.Any())
                    {
                        // Modal đồng bộ chỉ hiển thị nếu giỏ hàng không rỗng
                        showSyncCartModal = true;
                    }
                    else
                    {
                        // Nếu giỏ hàng rỗng, không hiển thị modal và tiếp tục đăng nhập
                        isLoggedIn = true;
                        CloseModal();
                        navigation.NavigateTo("/");
                    }
                }
                else // Không có giỏ hàng, tiếp tục đăng nhập
                {
                    isLoggedIn = true;
                    CloseModal();
                    navigation.NavigateTo("/");
                }
            }
            else
            {
                await ShowToast("error", "Tên đăng nhập hoặc mật khẩu không đúng!");
            }
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Lỗi: {ex.Message}");
        }
    }



    private async Task ConfirmSyncCart()
    {
        showSyncCartModal = false; 

        // Đồng bộ giỏ hàng
        await SyncCartWithLocalStorage(currentUserId);

        // Xóa pendingOrder trong LocalStorage
        await JS.InvokeVoidAsync("localStorage.removeItem", "pendingOrder");
        var userJson = await SessionStorage.GetItemAsStringAsync("user");
        if (!string.IsNullOrEmpty(userJson))
        {
            var loggedInUser = JsonConvert.DeserializeObject<Users>(userJson);
            if (loggedInUser != null)
            {
                await SessionStorage.SetItemAsStringAsync("user", JsonConvert.SerializeObject(loggedInUser));
            }
        }

        isLoggedIn = true;
        CloseModal();
        navigation.NavigateTo("/");
    }


    private void CancelSyncCart()
    {
        showSyncCartModal = false; 
        isLoggedIn = true;
        CloseModal();
        navigation.NavigateTo("/");
    }


    private DateTime? otpExpiryTime; // Thời gian hết hạn của OTP

    private async Task SendOtp()
    {
        if (string.IsNullOrEmpty(registerModel.Phone))
        {
            otpError = "Số điện thoại không được để trống.";
            await ShowToast("error", otpError);
            return;
        }

        try
        {
            var phoneExists = await userService.CheckPhoneNumberAsync(registerModel.Phone);

            if (phoneExists)
            {
                otpError = "Số điện thoại đã tồn tại với tài khoản có mật khẩu. Vui lòng sử dụng chức năng quên mật khẩu.";
                await ShowToast("error", otpError);
                return;
            }

            generatedOtp = new Random().Next(100000, 999999).ToString();
            otpSent = true;
            otpExpiryTime = DateTime.Now.AddMinutes(5);

            // Khóa trường nhập số điện thoại
            registerModel.IsPhoneDisabled = true;

            showOtpReminderModal = true;
            otpError = null;

            await ShowToast("success", "Mã OTP đã được gửi. Vui lòng kiểm tra.");
        }
        catch (Exception ex)
        {
            otpError = "Đã xảy ra lỗi khi gửi OTP.";
            await ShowToast("error", $"{otpError} Chi tiết: {ex.Message}");
        }
    }



    private void CloseOtpReminderModal()
    {
        showOtpReminderModal = false;
    }




    private async Task HandleRegisterAsync()
    {
        // Kiểm tra OTP
        if (string.IsNullOrEmpty(registerModel.OTP))
        {
            await ShowToast("error", "Vui lòng nhập OTP.");
            return;
        }

        // Kiểm tra OTP có khớp không
        if (registerModel.OTP != generatedOtp)
        {
            await ShowToast("error", "OTP không chính xác.");
            return;
        }

        // Kiểm tra OTP có hết hạn không
        if (otpExpiryTime == null || otpExpiryTime <= DateTime.Now)
        {
            await ShowToast("error", "OTP đã hết hạn. Vui lòng gửi lại.");
            return;
        }

        // Kiểm tra mật khẩu xác nhận
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            await ShowToast("error", "Mật khẩu và xác nhận mật khẩu không khớp.");
            return;
        }

        try
        {
            var newUser = new Users
            {
                Email = registerModel.Email,
                Phone = registerModel.Phone,
                Password = registerModel.Password, 
                OTPCheck = true,                  
                Created_at = DateTime.Now,
                Updated_at = DateTime.Now
            };          

            var passwordHasher = new PasswordHasher<object>();
            newUser.Password = passwordHasher.HashPassword(null, newUser.Password);

            var createdUser = await userService.Create(newUser);
            if (createdUser != null && createdUser.Id > 0)
            {
                await ShowToast("success", "Đăng ký thành công! Đang tự động đăng nhập...");

                // Đăng nhập tự động
                var loginUser = new Users
                    {
                        Email = registerModel.Email,
                        Password = registerModel.Password
                    };

                var loggedInUser = await userService.Login(loginUser, loginModel.RememberMe);

                if (loggedInUser != null)
                {
                    await SessionStorage.SetItemAsStringAsync("user", Newtonsoft.Json.JsonConvert.SerializeObject(loggedInUser));

                    StateHasChanged();
                    await Task.Delay(2000);
                    CloseModal();
                    navigation.NavigateTo($"/user/UserDetails/{loggedInUser.Id}");
                }
                else
                {
                    await ShowToast("error", "Đăng ký thành công nhưng đăng nhập thất bại.");
                }
            }
            else
            {
                await ShowToast("error", "Không thể tạo người dùng.");
            }
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Lỗi: {ex.Message}");
        }
    }

    private void NavigateToForgotPassword()
    {
        CloseModal();
        navigation.NavigateTo("/admin/forgot-password");
    }

    private async void NavigateToUser()
    {
        try
        {
            var userInfo = await SessionStorage.GetItemAsStringAsync("user");

            if (!string.IsNullOrEmpty(userInfo))
            {
                var currentUser = JsonConvert.DeserializeObject<Users>(userInfo);

                if (currentUser != null && currentUser.Id > 0)
                {
                    navigation.NavigateTo($"/user/UserDetails/{currentUser.Id}");
                    CloseDropdown();
                    return;
                }
            }
            await JS.InvokeVoidAsync("toastr.error", $"Vui lòng đăng nhập để xem thông tin cá nhân.");
            return;

        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Lỗi khi điều hướng: {ex.Message}");
        }
    }


    private async Task HandleLogout()
    {
        await SessionStorage.RemoveItemAsync("user");
        isLoggedIn = false;
        await ShowToast("success", "Đăng Xuất thành công!");
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public bool RememberMe { get; set; }

    }

    public class RegisterModel
    {
        public string Email { get; set; }       // Email người dùng
        public string Password { get; set; }   // Mật khẩu
        public string ConfirmPassword { get; set; } // Xác nhận mật khẩu
        public string Phone { get; set; }      // Số điện thoại
        public string OTP { get; set; }        // Mã OTP
        public bool IsPhoneDisabled { get; set; } = false;
    }




    private async Task SyncCartWithLocalStorage(long userId)
    {
        // Lấy giỏ hàng từ LocalStorage
        var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
        if (string.IsNullOrEmpty(cartJson)) return;

        var localCart = JsonConvert.DeserializeObject<List<CartProduct>>(cartJson);
        if (localCart == null || !localCart.Any()) return;

        var cart = await cartServices.GetAll();
        var userCart = cart.FirstOrDefault(c => c.UserId == userId);

        if (userCart == null)
        {
            userCart = new Carts { UserId = userId };
            await cartServices.Create(userCart);
        }

        foreach (var localProduct in localCart)
        {
            var productAttribute = await productAttributeServices.GetProductAttributesById(localProduct.Product_id);
            if (productAttribute == null || productAttribute.Stock < localProduct.Quantity)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm {localProduct.Title} không đủ hàng.");
                continue;
            }

            var cartDetails = await cartDetailServices.GetAll();
            var existingCartDetail = cartDetails.FirstOrDefault(cd => cd.Product_id == localProduct.Product_id && cd.Cart_id == userCart.Id);

            if (existingCartDetail != null)
            {
                if (existingCartDetail.Quantity + localProduct.Quantity > productAttribute.Stock)
                {
                    await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm {localProduct.Title} vượt quá số lượng trong kho.");
                    continue;
                }

                existingCartDetail.Quantity += localProduct.Quantity;
                await cartDetailServices.Update(existingCartDetail);
            }
            else
            {
                var newCartDetail = new Cart_details
                    {
                        Cart_id = userCart.Id,
                        Product_id = localProduct.Product_id,
                        Quantity = localProduct.Quantity,
                        Status = "ok"
                    };

                await cartDetailServices.Create(newCartDetail);
            }
        }

        // Xóa giỏ hàng trong LocalStorage
        await JS.InvokeVoidAsync("localStorage.removeItem", "cart");
        await JS.InvokeVoidAsync("toastr.success", "Đồng bộ giỏ hàng thành công.");
    }

    public class CartProduct
    {
        public long Product_id { get; set; }        // ID sản phẩm
        public string Title { get; set; }         // Tên sản phẩm
        public string ImageUrl { get; set; }      // URL hình ảnh
        public string Color { get; set; }         // Màu sắc
        public string Size { get; set; }          // Kích thước
        public int Quantity { get; set; }         // Số lượng
        public decimal UnitPrice { get; set; }    // Đơn giá
        public decimal TotalPrice { get; set; }   // Tổng tiền
    }

    
    protected override async Task OnInitializedAsync()
    {
        await CheckUserLoggedInAsync();
        await LoadPosts();
    }

    private async Task CheckUserLoggedInAsync()
    {
        try
        {
            var userInfo = await SessionStorage.GetItemAsStringAsync("user");

            if (!string.IsNullOrEmpty(userInfo))
            {
                // Deserialize JSON thành đối tượng Users
                users = Newtonsoft.Json.JsonConvert.DeserializeObject<Users>(userInfo);

                if (users != null)
                {
                    isLoggedIn = !string.IsNullOrEmpty(users.Name);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lấy thông tin từ session: {ex.Message}");
        }
    }


    private async Task LoadPosts()
    {
        page_list = await sev.GetAllType("page");
    }
    private void NavToCart()
    {
        if (users.Id == null)
        {
            return;
        }
        navigation.NavigateTo($"/cart");
    }
    private void NavDetails()
    {
        CloseDropdown();
        navigation.NavigateTo($"/user/login");
      
    }

    private string MenuStyle => IsMenuOpen ? "display: block;" : "display: none;";

    private void ToggleDropdown()
    {
        IsMenuOpen = !IsMenuOpen;
    }
    private void CloseDropdown()
    {
        IsMenuOpen = false;
    }

    private async Task Logout()
    {
        await SessionStorage.RemoveItemAsync("user");
        isLoggedIn = false;
        users = new Users();
        CloseDropdown();
        navigation.NavigateTo("/");
     
    }
    private void NavDetailsPage(string slug)
    {
        navigation.NavigateTo($"/{slug}", forceLoad: true);
        CloseMenu();
    }
    private async void CloseMenu()
    {
        await JS.InvokeVoidAsync("closeDropdownMenu");
    }
}

<script>
    function closeDropdownMenu() {
        const menu = document.getElementById('dropdownMenu');
        if (menu) {
            menu.classList.remove('show');
        }
    }
</script>

