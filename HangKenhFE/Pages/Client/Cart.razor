@page "/cart"
@using BlazorBootstrap
@using HangKenhFE.BackgroundServices
@inject ICartDetailsService cartDetailsService
@inject ICartService cartServices
@inject IOrderIServices orderServices
@inject OrderDetailsIServices orderDetailsServices
@inject IOrderTrackingServices orderTrackingServices
@inject EmailNotification email
@inject IProductAttributeServies productAttributeServices
@inject IAddressServices addressServices
@inject IUserService userServices
@inject IUserVoucherService userVoucherServices
@inject IVoucherService voucherServices
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@using System.Text.Json;
@using System.Text.RegularExpressions
@inject IJSRuntime JS
<style>
    .color-preview {
        width: 24px;
        height: 24px;
        border-radius: 50%;
    }

    .btn-outline-secondary {
        border: 1px solid #ccc;
        color: #555;
    }

        .btn-outline-secondary:hover {
            background-color: #f8f9fa;
        }

    .table {
        border-collapse: collapse;
        border: none; /* Loại bỏ viền bảng */
    }

        .table td, .table th {
            border: none; /* Loại bỏ viền ô */
            border-bottom: 1px solid #ddd; /* Chỉ giữ viền dưới */
            text-align: center;
        }

    .btn-danger {
        color: #fff;
    }

        .btn-danger:hover {
            background-color: #e74c3c;
        }

    .card-header {
        background-color: #ffeb3d;
    }

    .product-img {
        width: 80px;
        height: 105px;
    }
</style>

<section class="section-banner">
    <img src="main/assets/images/banner-category.jpg"
         class="w-100 h-100" alt="banner-image-3">
    <div class="title-banner">
        <h1>
            GIỎ HÀNG CỦA BẠN
        </h1>
    </div>
</section>
<section id="collection">
    <div class="container mt-4">
        <div class="row">
            <!-- Main Giỏ hàng -->
            <main class="col-md-12">
                <div class=" mb-4">
                    @*      <div class="card-header text-center">
                    <h4>Thông tin giỏ hàng</h4>
                    </div> *@
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table card-table table-vcenter text-nowrap">
                                <thead>
                                    <tr>
                                        <th>
                                            <input type="checkbox" @onchange="ToggleSelectAll" checked="@isAllSelected" />
                                            <label>All</label>
                                        </th>
                                        <th>Hình Ảnh</th>
                                        <th>Sản phẩm</th>
                                        <th>Màu</th>
                                        <th>Kích thước</th>
                                        <th>Số lượng</th>
                                        <th>Đơn giá</th>
                                        <th>Tổng tiền</th>
                                        <th>Hành động</th>
                                    </tr>
                                </thead>
                                <tbody class="fs-6">
                                    @foreach (var item in lst_CartDetails)
                                    {
                                        <tr>
                                            <td class="text-center align-middle">
                                                <input type="checkbox"
                                                       @onchange="@(e => OnCheckboxChange(e, user != null && user.Id > 0 ? item.Id : item.Product_id ?? 0))"
                                                       checked="@selectedCartDetails.Contains(user != null && user.Id > 0 ? item.Id : item.Product_id ?? 0)" />

                                            </td>
                                            <!-- Ảnh sản phẩm -->
                                            <td class="text-center align-middle">
                                                <img src="@item.Product_Attributes.Image" alt="Hình ảnh" class="product-img" style="width: 80px; height: 105px;" />
                                            </td>

                                            <!-- Tên sản phẩm -->
                                            <td class="text-center align-middle">@item.Product_Attributes.SKU</td>

                                            <!-- Màu sản phẩm -->
                                            <td class="sort-city text-center align-middle">
                                                <div class="d-flex align-items-center justify-content-center">
                                                    <span>@item.Product_Attributes.Color.Title</span>
                                                    <div class="color-preview"
                                                         style="background-color: @item.Product_Attributes.Color.Color_code; width: 24px; height: 24px; margin-left: 8px; border: 1px solid #ccc;">
                                                    </div>
                                                </div>
                                            </td>

                                            <!-- Kích thước sản phẩm -->
                                            <td class="text-center align-middle">@item.Product_Attributes.Size.Title</td>

                                            <!-- Số lượng -->
                                            <td class="text-center align-middle">
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => UpdateQuantityView(item.Id, item.Quantity - 1??0)">
                                                        <i class="bi bi-dash"></i> <!-- Sử dụng icon Bootstrap -->
                                                    </button>
                                                    <span class="btn btn-light btn-sm mx-2 px-2 py-1">@item.Quantity</span>
                                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => UpdateQuantityView(item.Id, item.Quantity + 1??0)">
                                                        <i class="bi bi-plus-lg"></i>
                                                    </button>
                                                </div>
                                            </td>

                                            <!-- Đơn giá -->
                                            <td class="text-center align-middle">

                                                @if (item.Product_Attributes.Sale_price != null && item.Product_Attributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", item.Product_Attributes.Regular_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                    <div>
                                                        <span style="font-weight: bold; color: red;">
                                                            @string.Format("{0:N0}", item.Product_Attributes.Sale_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div>
                                                        <span>
                                                            @string.Format("{0:N0}", item.Product_Attributes.Regular_price).Replace(".", ",") VNĐ
                                                        </span>
                                                    </div>
                                                }
                                            </td>

                                            <!-- Tổng tiền -->
                                            <td class="text-center align-middle">
                                                @if (item.Product_Attributes.Sale_price != null && item.Product_Attributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", (item.Quantity * item.Product_Attributes.Regular_price)) VNĐ
                                                        </span>
                                                    </div>
                                                    <div>
                                                        <span style="color: red; font-weight: bold;">
                                                            @string.Format("{0:N0}", (item.Quantity * item.Product_Attributes.Sale_price)) VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>@string.Format("{0:N0}", (item.Quantity * item.Product_Attributes.Regular_price)) VNĐ</span>
                                                }
                                            </td>

                                            <!-- Xóa sản phẩm -->
                                            <td class="text-center align-middle">
                                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteCartDetail(item.Id)">
                                                    <i class="bi bi-trash3"></i>
                                                </button>
                                            </td>
                                        </tr>

                                    }
                                </tbody>

                            </table>
                        </div>
                    </div>
                    <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 20px;">
                        @if (lst_CartDetails == null || lst_CartDetails.Count == 0)
                        {
                            <h1 class="text-center">Hãy tham quan cửa hàng của chúng tôi</h1>
                        }
                        else
                        {
                            <div class="ms-auto">
                                <button class="btn btn-sm btn-outline-success btn-lg" @onclick="CreateModalOrder">
                                    Thanh toán
                                </button>
                            </div>
                        }
                    </div>

                    @if (user.Id == 0)
                    {
                        <div class="mt-3 text-center">
                            <hr style="border: 1px solid #ccc;" />
                            <p>
                                Để quá trình mua hàng ổn định thì hãy <a href="/#" class="text-primary">đăng nhập</a> để tránh rủi ro.
                                Các sản phẩm vẫn sẽ được thêm tự động vào tài khoản. Bạn có thắc mắc gì vui lòng
                                <a href="/faq" class="text-primary">nhấn vào đây</a>.
                            </p>
                            <hr style="border: 1px solid #ccc;" />
                        </div>

                    }
                </div>
            </main>
            @if (isModalOrderVisiable)
            {
                <div class="modal fade show d-block" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 75%; width: auto;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Thông tin đơn hàng</h5>
                                <button type="button" class="btn-close" @onclick="CloseModalOrder" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="d-flex justify-content-between align-items-start mb-4">
                                    <div class="col-12 mb-3 p-4 border rounded shadow-sm" style="background-color: #f9f9f9;">
                                        <h5 class="mb-4 text-center">Thông tin khách hàng</h5>
                                        <div class="mb-2">
                                            <label class="me-2">
                                                <strong>Tên khách hàng:</strong>
                                                @if (user != null && !string.IsNullOrEmpty(user.Name))
                                                {
                                                    @user.Name
                                                }
                                                else if (selectedAddress != null)
                                                {
                                                    @selectedAddress.Name
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Chưa có thông tin</span>
                                                }
                                            </label>
                                        </div>
                                        <div class="mb-2">
                                            <label class="me-2">
                                                <strong>Số điện thoại:</strong>
                                                @if (user != null && !string.IsNullOrEmpty(user.Phone))
                                                {
                                                    @user.Phone
                                                }
                                                else if (selectedAddress != null)
                                                {
                                                    @selectedAddress.Phone
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Chưa có thông tin</span>
                                                }
                                            </label>
                                        </div>

                                        <div class="mb-2">
                                            <label class="me-2"><strong>Email:</strong> @user.Email</label>
                                        </div>
                                        @if (selectedAddress == null)
                                        {
                                            <label class="text-warning">Vui lòng chọn địa chỉ</label>
                                        }
                                        else
                                        {
                                            <div class="mb-2">
                                                <label class="me-2"><strong>Địa chỉ nhận hàng:</strong> @selectedAddress.Street - @selectedAddress.Ward_commune - @selectedAddress.District - @selectedAddress.Province_city</label>
                                            </div>
                                            <div class="mb-2">
                                                <label class="me-2"><strong>Ghi chú:</strong> @selectedAddress.Status</label>
                                            </div>
                                        }
                                        <button class="btn btn-outline-primary w-100" @onclick="ChoseAddressModal">Thay đổi địa chỉ</button>
                                    </div>
                                </div>
                                @if (isModalAddressVisiable)
                                {
                                    <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                        <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 75%; width: auto;">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Danh sách địa chỉ của Khách Hàng</h5>
                                                    <button type="button" class="btn-close" @onclick="CloseAddressModal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                                        <button class="btn btn-sm btn-outline-success" @onclick="CreateAddressModal">Thêm mới địa chỉ</button>
                                                    </div>
                                                    <!-- model create address -->
                                                    @if (isModalCreateAddress)
                                                    {
                                                        <div class="modal fade show d-block" tabindex="-1" role="dialog">
                                                            <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 60%; width: auto;">
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h5 class="modal-title">Thêm mới địa chỉ</h5>
                                                                    </div>
                                                                    <form class="p-4 bg-light rounded shadow">
                                                                        <div class="row mb-3">
                                                                            <div class="col-md-6">
                                                                                <label for="name" class="form-label">Tên người nhận </label>
                                                                                <input type="text" @bind="address.Name" class="form-control" placeholder="Nhập tên người nhận">
                                                                            </div>
                                                                            <div class="col-md-6">
                                                                                <label for="name" class="form-label">SĐT </label>
                                                                                <input type="text" @bind="address.Phone" class="form-control" placeholder="Nhập SĐT">
                                                                            </div>

                                                                        </div>
                                                                        <div class="row mb-3">
                                                                            <div class="col-md-4">
                                                                                <label for="city" class="form-label">Tỉnh/Thành phố</label>
                                                                                <select id="city" @onchange="OnProvinceChange" class="form-select">
                                                                                    <option value="">Chọn Tỉnh</option>
                                                                                    @if (provinces != null && provinces.Count > 0)
                                                                                    {
                                                                                        @foreach (var province in provinces)
                                                                                        {
                                                                                            <option value="@province.ProvinceID">@province.ProvinceName</option>
                                                                                        }
                                                                                    }
                                                                                </select>
                                                                            </div>
                                                                            <div class="col-md-4">
                                                                                <label for="district" class="form-label">Quận/Huyện</label>
                                                                                <select id="district" @onchange="OnDistrictChange" class="form-select" disabled="@(!hasDistricts)">
                                                                                    <option value="">Chọn Huyện</option>
                                                                                    @if (districts != null && districts.Count > 0)
                                                                                    {
                                                                                        @foreach (var district in districts)
                                                                                        {
                                                                                            <option value="@district.DistrictID">@district.DistrictName</option>
                                                                                        }
                                                                                    }
                                                                                </select>
                                                                            </div>
                                                                            <div class="col-md-4">
                                                                                <label for="ward" class="form-label">Xã/Phường/Thị trấn</label>
                                                                                <select id="ward" @onchange="OnWardChange" class="form-select" disabled="@(!hasWards)">
                                                                                    <option value="">Chọn Xã</option>
                                                                                    @if (wards != null && wards.Count > 0)
                                                                                    {
                                                                                        @foreach (var ward in wards)
                                                                                        {
                                                                                            <option value="@ward.WardCode">@ward.WardName</option>
                                                                                        }
                                                                                    }
                                                                                </select>
                                                                            </div>
                                                                        </div>
                                                                        <div class="row mb-3">
                                                                            <div class="col-md-8">
                                                                                <label for="address" class="form-label">Địa chỉ cụ thể</label>
                                                                                <input type="text" @bind="address.Street" class="form-control" placeholder="Nhập địa chỉ cụ thể">
                                                                            </div>
                                                                            <div class="col-md-4">
                                                                                <label for="note" class="form-label">Ghi chú</label>
                                                                                <input type="text" @bind="address.Status" id="note" class="form-control" placeholder="Nhập ghi chú">
                                                                            </div>
                                                                        </div>

                                                                        <div class="modal-footer d-flex justify-content-between">
                                                                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="CreateAddress">Xác nhận</button>
                                                                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseCreateAddress">Hủy</button>
                                                                        </div>
                                                                    </form>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                    @if (lst_Address != null && lst_Address.Any())
                                                    {
                                                        <table class="table table-bordered">
                                                            <thead>
                                                                <tr>
                                                                    <th>STT</th>
                                                                    <th>Tên người nhận</th>
                                                                    <th>Số điện thoại</th>
                                                                    <th>Địa chỉ</th>
                                                                    <th>Thao tác</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @{
                                                                    int index = 1;
                                                                }
                                                                @foreach (var item in lst_Address)
                                                                {
                                                                    <tr>
                                                                        <td>@index</td>
                                                                        <td>@item.Name</td>
                                                                        <td>@item.Phone</td>
                                                                        <td>@($"{item.Street}, {item.Ward_commune}, {item.District}, {item.Province_city}")</td>
                                                                        <td>
                                                                            <button class="btn btn-primary mt-2" @onclick="() => SelectAddress(item)">Chọn</button>
                                                                        </td>
                                                                    </tr>
                                                                    index++;
                                                                }
                                                            </tbody>
                                                        </table>
                                                    }
                                                    else
                                                    {
                                                        if (guestAddresses != null && guestAddresses.Any())
                                                        {
                                                            <table class="table table-bordered">
                                                                <thead>
                                                                    <tr>
                                                                        <th>STT</th>
                                                                        <th>Tên người nhận</th>
                                                                        <th>Số điện thoại</th>
                                                                        <th>Địa chỉ</th>
                                                                        <th>Thao tác</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @for (int i = 0; i < guestAddresses.Count; i++)
                                                                    {
                                                                        var address = guestAddresses[i];
                                                                        if (address != null)
                                                                        {
                                                                            <tr>
                                                                                <td>@(i + 1)</td>
                                                                                <td>@address.Name</td>
                                                                                <td>@address.Phone</td>
                                                                                <td>@($"{address.Street}, {address.Ward_commune}, {address.District}, {address.Province_city}")</td>
                                                                                <td>
                                                                                    <button class="btn btn-primary mt-2" @onclick="() => SelectAddress(address)">Chọn</button>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        }
                                                        else
                                                        {
                                                            <h1>Khách hàng chưa có thông tin về địa chỉ</h1>
                                                        }
                                                    }


                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="modal-backdrop fade show"></div>
                                }
                                <div class="container">
                                    <div class="row mb-3 text-center fw-bold" style="background-color: #f8f9fa; border-radius: 0.5rem; padding: 1rem; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                                        <div class="col-2 d-flex align-items-center justify-content-center">Ảnh</div>
                                        <div class="col-3 d-flex align-items-center justify-content-center">Sản phẩm</div>
                                        <div class="col-2 d-flex align-items-center justify-content-center">Số lượng</div>
                                        <div class="col-2 d-flex align-items-center justify-content-center">Đơn giá</div>
                                        <div class="col-2 d-flex align-items-center justify-content-center">Thành tiền</div>
                                    </div>

                                    @foreach (var item in lst_OrderDetail)
                                    {
                                        <div class="row mb-3 align-items-center border-bottom pb-3">
                                            <div class="col-3 text-center">
                                                <img src="@item.ProductAttributes.Image" alt="Hình ảnh" class="product-img" style="width: 60px; height: 85px;" />
                                            </div>
                                            <div class="col-3 text-start">
                                                <h6 class="mb-0">@item.ProductAttributes.SKU</h6>
                                                <div class="d-flex align-items-center">
                                                    <span class="me-2">@item.ProductAttributes.Color.Title</span>
                                                    <div class="color-preview" style="width: 24px; height: 24px; background-color: @item.ProductAttributes.Color.Color_code; border-radius: 50%; border: 1px solid #ddd;"></div>
                                                </div>
                                                <span>@item.ProductAttributes.Size.Title</span>
                                            </div>
                                            <div class="col-2 text-center">
                                                <div class="btn-group" role="group">
                                                    <span class="btn btn-light btn-sm mx-2 px-2 py-1">@item.Quantity</span>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center">
                                                @if (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", item.ProductAttributes.Regular_price) VNĐ
                                                        </span>
                                                        <br />
                                                        <span style="color: red; ">
                                                            @string.Format("{0:N0}", item.ProductAttributes.Sale_price) VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>@string.Format("{0:N0}", item.ProductAttributes.Regular_price) VNĐ</span>
                                                }
                                            </div>
                                            <div class="col-2 text-center">
                                                @if (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                                                {
                                                    <div>
                                                        <span style="text-decoration: line-through; color: gray;">
                                                            @string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Regular_price)) VNĐ
                                                        </span>
                                                        <br />
                                                        <span style="color: red; ">
                                                            @string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Sale_price)) VNĐ
                                                        </span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span>@string.Format("{0:N0}", (item.Quantity * item.ProductAttributes.Regular_price)) VNĐ</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="container my-4">
                                    <div class="row">
                                        <div class="col-12 text-center">
                                            <h5 style="text-align center">Thông tin thanh toán</h5>
                                        </div>
                                        <div class="col-12 text-end">
                                            <div class="d-flex justify-content-end my-3">
                                                <button type="button" class="btn btn-outline-primary me-2" @onclick=OpenVoucher>VOUCHER</button>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>Tổng tiền hàng:</span>
                                                <span>@string.Format("{0:N0}", totalPrincipal) VNĐ</span>
                                            </div>
                                            <div class="d-flex justify-content-between" style="color: red;">
                                                <span>Tổng tiền chiết khấu:</span>
                                                <span>- @string.Format("{0:N0}", discountAmount) VNĐ</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>Tổng tiền sau chiết khấu:</span>
                                                <span> @string.Format("{0:N0}", totalAmount) VNĐ</span>
                                            </div>
                                            <div class="d-flex justify-content-between" style="color: red;">
                                                <span>Giảm giá Voucher:</span>
                                                <span>- @string.Format("{0:N0}", voucherAmount) VNĐ</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>Phí giao hàng:</span>
                                                <span>@string.Format("{0:N0}", feeShipping) VNĐ</span>
                                            </div>
                                            <div class="d-flex justify-content-between fw-bold">
                                                <span>Tổng tiền thanh toán:</span>
                                                <span style="color: green;">@string.Format("{0:N0}", totalMoney) VNĐ</span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-center my-3">
                                        <button type="button" class="btn btn-outline-primary me-2" @onclick="PayByCash">Thanh toán khi nhận hàng</button>
                                        <button type="button" class="btn btn-outline-success" @onclick="PayByMomo">Thanh toán qua MoMo</button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="ConfirmDeleteOrder">Xóa hóa đơn</button>
                                    </div>
                                    @if (isMomoModalVisible)
                                    {
                                        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0, 0, 0, 0.5);">
                                            <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title">Thanh toán qua MoMo</h5>
                                                        <button type="button" class="btn-close" @onclick="CancelMomoPayment" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <iframe src="@payUrl" style="width: 100%; height: 600px; border: none;" allowfullscreen></iframe>
                                                    </div>
                                                    <div class="modal-footer d-flex justify-content-between">
                                                        <div>
                                                            <button type="button" class="btn btn-secondary" @onclick="CancelMomoPayment">Hủy</button>
                                                        </div>
                                                        <div>
                                                            <button type="button" class="btn btn-primary" @onclick="ConfirmMomoPayment">Hoàn thành</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="modal-backdrop fade show"></div>
                                    }
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }
            @if (isModalChooseVoucher)
            {
                <div class="modal fade show d-block" tabindex="-1" role="dialog">
                    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 55%">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Danh sách mã giảm giá</h5>
                                <button type="button" class="btn-close" @onclick="CloseVoucher" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div class="d-flex align-items-center">
                                        <label for="searchCustomer" class="me-2">Tìm kiếm:</label>
                                        <input type="text" id="searchCustomer" class="form-control" style="width: 250px;" placeholder="CODE">
                                    </div>
                                </div>
                                @foreach (var item in lst_UserVoucher)
                                {
                                    decimal suggestBuy = 0;
                                    decimal conditionValue = 0m;
                                    decimal maxDiscountValue = 0m;
                                    string formattedPercent = item.Vouchers.Percent ?? "0";
                                    decimal totalAmountValue = totalAmount ?? 0m;
                                    if (decimal.TryParse(item.Vouchers.Condition, out conditionValue))
                                    {
                                        suggestBuy = Math.Max(0, conditionValue - totalAmountValue);
                                    }
                                    if (!decimal.TryParse(item.Vouchers.Condition, out conditionValue))
                                    {
                                        conditionValue = 0m;
                                    }
                                    if (!decimal.TryParse(item.Vouchers.MaxDiscountValue, out maxDiscountValue))
                                    {
                                        maxDiscountValue = 0m;
                                    }

                                    // format percent
                                    decimal percentValue = 0m;
                                    if (decimal.TryParse(item.Vouchers.Percent, out percentValue))
                                    {
                                        formattedPercent = percentValue.ToString("N0");
                                    }

                                    <div style="background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); padding: 15px;">
                                        <div style="background: #3366CC; color: white; padding: 10px; border-radius: 10px 10px 0 0;">
                                            <span style="font-weight: bold;">@item.Vouchers.Code</span>
                                        </div>
                                        @if (item.Vouchers.Description == "Percentage")
                                        {
                                            <h2 style="margin: 0; font-size: 18px; color: #333;">Giảm @formattedPercent % cho đơn hàng đạt tối thiểu @conditionValue.ToString("N0") VNĐ</h2>
                                            <p style="margin: 8px 0; color: #666; font-size: 15px">Giảm tối đa @maxDiscountValue.ToString("N0") VNĐ</p>
                                        }
                                        else
                                        {
                                            <h2 style="margin: 0; font-size: 18px; color: #333;">Giảm @formattedPercent VNĐ cho đơn hàng đạt tối thiểu @conditionValue.ToString("N0") VNĐ</h2>

                                        }

                                        <p style="margin: 8px 0; color: red; font-size: 15px"><small>Hết hạn lúc: @item.Vouchers.End_time</small></p>
                                        <div style="margin-top: 10px; text-align: left;">
                                            @if (suggestBuy > 0)
                                            {
                                                <button class="btn btn-outline-warning">
                                                    Mua thêm @suggestBuy.ToString("N0") VNĐ để sử dụng
                                                </button>
                                            }
                                            else
                                            {
                                                <div class="d-flex justify-content-between">
                                                    <button class="btn btn-outline-success" @onclick="() => SelectVoucher(item.VoucherId)">
                                                        @if (SelectedVoucherId == item.VoucherId)
                                                        {
                                                            <span>Đã áp dụng</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Áp dụng</span>
                                                        }
                                                    </button>
                                                    @if (SelectedVoucherId == item.VoucherId)
                                                    {
                                                        <span style="color: green; font-weight: bold;">
                                                            Tiết kiệm được : @string.Format("{0:N0}", voucherAmount) VNĐ
                                                        </span>
                                                    }
                                                </div>


                                            }
                                        </div>
                                        <div style="margin-top: 10px; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9;">
                                            <strong>Trạng thái:</strong>
                                            @if (item.Vouchers.Status == "Đang diễn ra")
                                            {
                                                <span style="color: green;">Còn hiệu lực</span>
                                            }
                                            else if (item.IsApplied)
                                            {
                                                <span style="color: red;">Đã sử dụng</span>
                                            }
                                            else
                                            {
                                                <span style="color: red;">Hết hiệu lực</span>
                                            }
                                        </div>
                                    </div>
                                }


                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>

            }
        </div>
    </div>
</section>

@code
{
    private Users user = new Users();
    private List<Cart_details> lst_CartDetails = new List<Cart_details>();
    private Cart_details cart_Details = new Cart_details();
    private Orders order = new Orders();
    private List<Order_details> lst_OrderDetail = new List<Order_details>();
    private List<Address> lst_Address = new List<Address>();
    private List<UserVouchers> lst_UserVoucher = new List<UserVouchers>();
    private Vouchers voucher = new Vouchers();
    private Address address = new Address();
    private List<long> selectedCartDetails = new List<long>();
    private List<long> initialCartDetails = new List<long>();
    private bool isAllSelected = false;

    private decimal? totalAmount = 0; // tổng tiền hàng đã giảm
    private decimal? totalPrincipal = 0; // tổng tiền hàng chưa giảm
    decimal? discountAmount = 0; // tiền được giảm
    decimal? voucherAmount = 0; // tiền giảm voucher
    private int? totalQuantity = 0;
    private decimal? feeShipping = 0; // phí ship
    private decimal? totalMoney = 0; // cần thanh toán
    private bool isModalOrderVisiable = false;
    private bool isModalAddressVisiable = false;
    private bool isModalCreateAddress = false;
    private bool isModalChooseVoucher = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userJsonString = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");

            if (!string.IsNullOrEmpty(userJsonString))
            {
                try
                {
                    // Parse JSON để lấy giá trị id và roles
                    var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJsonString);

                    if (userData != null)
                    {
                        // Lấy UserId
                        if (userData.ContainsKey("Id") && long.TryParse(userData["Id"]?.ToString(), out long result))
                        {
                            user = await userServices.GetById(result);
                        }
                        else
                        {
                            user = null; // Nếu không tìm thấy hoặc parse không được, đặt user là null
                        }
                    }
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"Error parsing User JSON: {ex.Message}");
                    user = null; // Nếu JSON không hợp lệ
                }
            }
        }
        CalculateTotalMoney();
    }

    protected override async Task OnInitializedAsync()
    {
        provinces = await address_Service.GetProvincesAsync();
        var allVoucher = await userVoucherServices.GetAll();
        if (user != null)
        {
            lst_UserVoucher = allVoucher.Where(v => v.UserId == user.Id && v.IsApplied == false).ToList();
        }


        await LoadCartDetails();
        await LoadOrderDetails();
        await LoadUserAddresses();
        CalculateTotalMoney();

    }

    private async void OpenVoucher()
    {
        await OnInitializedAsync();
        isModalChooseVoucher = true;
    }

    private void CloseVoucher()
    {
        isModalChooseVoucher = false;
    }

    private List<Address> guestAddresses = new List<Address>();

    private async Task LoadUserAddresses()
    {
        if (user != null && user.Id > 0)
        {
            // Lấy địa chỉ từ API nếu người dùng đã đăng nhập
            lst_Address = await addressServices.GetAddressByUserId(user.Id);
        }
        else
        {
            // Lấy địa chỉ từ localStorage nếu người dùng chưa đăng nhập
            var localStorageAddresses = await JS.InvokeAsync<string>("localStorage.getItem", "addresses");
            guestAddresses = string.IsNullOrEmpty(localStorageAddresses)
                ? new List<Address>()
                : Newtonsoft.Json.JsonConvert.DeserializeObject<List<Address>>(localStorageAddresses);

            // Kiểm tra và loại bỏ phần tử null hoặc không hợp lệ
            guestAddresses = guestAddresses?.Where(address => address != null).ToList() ?? new List<Address>();
        }
    }



    private long? SelectedVoucherId;

    private async Task ToggleSelectAll()
    {
        isAllSelected = !isAllSelected;
        selectedCartDetails.Clear();
        totalAmount = 0;
        totalPrincipal = 0;

        if (isAllSelected)
        {
            if (user == null || user.Id <= 0) // Người dùng chưa đăng nhập
            {
                // Lấy danh sách sản phẩm từ localStorage
                var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
                if (!string.IsNullOrEmpty(cartJson))
                {
                    var cartProducts = JsonSerializer.Deserialize<List<CartProduct>>(cartJson);
                    foreach (var product in cartProducts)
                    {
                        selectedCartDetails.Add(product.Product_id);
                        totalAmount += product.Quantity * product.UnitPrice;
                        totalPrincipal += product.Quantity * product.UnitPrice;
                    }
                }
            }
            else // Người dùng đã đăng nhập
            {
                foreach (var item in lst_CartDetails)
                {
                    selectedCartDetails.Add(item.Product_id ?? 0);
                    totalAmount += item.Quantity * (decimal)(item.Product_Attributes.Sale_price ?? item.Product_Attributes.Regular_price ?? 0);
                    totalPrincipal += item.Quantity * (decimal)(item.Product_Attributes.Regular_price ?? 0);
                }
            }
        }
        CalculateTotalMoney();
        StateHasChanged();
    }



    private async Task OnCheckboxChange(ChangeEventArgs e, long productId)
    {
        bool isChecked = e.Value is bool && (bool)e.Value;

        if (isChecked)
        {
            // Thêm Product_id vào selectedCartDetails
            if (!selectedCartDetails.Contains(productId))
            {
                selectedCartDetails.Add(productId);
            }
        }
        else
        {
            // Loại bỏ Product_id khỏi selectedCartDetails
            if (selectedCartDetails.Contains(productId))
            {
                selectedCartDetails.Remove(productId);
            }
        }

        // Tính toán lại tổng tiền dựa trên trạng thái đã chọn
        totalAmount = 0;
        totalPrincipal = 0;

        if (user == null || user.Id <= 0) // Người dùng chưa đăng nhập
        {
            // Lấy danh sách sản phẩm từ localStorage
            var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
            if (!string.IsNullOrEmpty(cartJson))
            {
                var cartProducts = JsonSerializer.Deserialize<List<CartProduct>>(cartJson);

                foreach (var product in cartProducts)
                {
                    if (selectedCartDetails.Contains(product.Product_id))
                    {
                        totalAmount += product.Quantity * product.UnitPrice;
                        totalPrincipal += product.Quantity * product.UnitPrice;
                    }
                }
            }
        }
        else // Người dùng đã đăng nhập
        {
            foreach (var item in lst_CartDetails)
            {
                if (selectedCartDetails.Contains(item.Product_id ?? 0))
                {
                    totalAmount += item.Quantity * (decimal)(item.Product_Attributes.Sale_price ?? item.Product_Attributes.Regular_price ?? 0);
                    totalPrincipal += item.Quantity * (decimal)(item.Product_Attributes.Regular_price ?? 0);
                }
            }
        }

        CalculateTotalMoney();
        StateHasChanged();
    }






    private async Task LoadCartDetails()
    {
        if (user != null && user.Id > 0)
        {
            // Người dùng đã đăng nhập
            var cartDetails = await cartDetailsService.GetAll();
            var cart = await cartServices.GetAll();
            var cartUser = cart.FirstOrDefault(c => c.UserId == user.Id);
            if (cartUser == null)
            {
                lst_CartDetails = new List<Cart_details>();
                return;
            }
            lst_CartDetails = cartDetails.Where(c => c.Cart_id == cartUser.Id).ToList();
        }
        else
        {
            // Người dùng chưa đăng nhập
            var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
            if (!string.IsNullOrEmpty(cartJson))
            {
                // Giải mã dữ liệu từ localStorage
                var cartProducts = JsonSerializer.Deserialize<List<CartProduct>>(cartJson);

                lst_CartDetails = new List<Cart_details>();
                foreach (var product in cartProducts)
                {
                    // Tìm thông tin sản phẩm từ DB
                    var productAttributes = await productAttributeServices.GetProductAttributesById(product.Product_id);
                    if (productAttributes != null)
                    {
                        // Thêm thông tin sản phẩm và số lượng vào giỏ hàng
                        lst_CartDetails.Add(new Cart_details
                            {
                                Id = product.Product_id,
                                Product_id = product.Product_id,
                                Quantity = product.Quantity, // Lấy số lượng từ localStorage
                                Product_Attributes = productAttributes
                            });
                    }
                }
            }
            else
            {
                lst_CartDetails = new List<Cart_details>();
            }
        }

        CalculateTotalMoney();
    }


    public class CartProduct
    {
        public int Product_id { get; set; }
        public long Id { get; set; }
        public string Title { get; set; }
        public string ImageUrl { get; set; }
        public string Color { get; set; }
        public string Size { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public decimal TotalPrice { get; set; }
    }



    private async Task UpdateQuantityView(long itemId, int newQuantity)
    {
        if (newQuantity < 1) return;

        if (user != null && user.Id > 0) // Người dùng đã đăng nhập
        {
            var cartDetail = lst_CartDetails.FirstOrDefault(x => x.Product_id == itemId);
            if (cartDetail != null)
            {
                var productVariant = cartDetail.Product_Attributes;
                var stock = productVariant.Stock;

                if (newQuantity > stock)
                {
                    await JS.InvokeVoidAsync("toastr.error", "Số lượng trong kho không đủ");
                    return;
                }

                // Cập nhật số lượng
                cartDetail.Quantity = newQuantity;

                // Cập nhật trong database
                await cartDetailsService.Update(cartDetail);
            }
        }
        else // Người dùng chưa đăng nhập
        {
            // Lấy danh sách sản phẩm từ localStorage
            var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
            if (!string.IsNullOrEmpty(cartJson))
            {
                var cartProducts = JsonSerializer.Deserialize<List<CartProduct>>(cartJson) ?? new List<CartProduct>();
                var existingCartItem = cartProducts.FirstOrDefault(x => x.Product_id == itemId);

                if (existingCartItem != null)
                {
                    // Kiểm tra tồn kho nếu cần
                    var productVariant = await productAttributeServices.GetProductAttributesById(itemId);
                    if (productVariant != null && newQuantity > productVariant.Stock)
                    {
                        await JS.InvokeVoidAsync("toastr.error", "Số lượng trong kho không đủ");
                        return;
                    }

                    // Cập nhật số lượng trong localStorage
                    existingCartItem.Quantity = newQuantity;

                    // Ghi lại vào localStorage
                    var updatedCartJson = JsonSerializer.Serialize(cartProducts);
                    await JS.InvokeVoidAsync("localStorage.setItem", "cart", updatedCartJson);
                    await LoadCartDetails();
                }
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Giỏ hàng trống hoặc không hợp lệ.");
                return;
            }
        }

        // Tính toán lại tổng tiền
        CalculateTotalMoney();
        StateHasChanged();
    }




    private async Task UpdateCartDetail(Cart_details cartDetail)
    {
        await cartDetailsService.Update(cartDetail);
    }

    private async Task DeleteCartDetail(long id)
    {
        if (user != null && user.Id > 0)
        {
            // Nếu người dùng đã đăng nhập, xóa trong database
            await cartDetailsService.Delete(id);
            await LoadCartDetails();
        }
        else
        {
            // Nếu người dùng chưa đăng nhập, xóa trong SessionStorage
            var guestCartJson = await SessionStorage.GetItemAsync<string>("cart");
            var guestCart = string.IsNullOrEmpty(guestCartJson)
                ? new List<Cart_details>()
                : JsonSerializer.Deserialize<List<Cart_details>>(guestCartJson);
            guestCart.RemoveAll(x => x.Id == id);
            await SessionStorage.SetItemAsync("cart", guestCart);
        }

        await LoadCartDetails();
    }



    private async Task SelectVoucher(long id)
    {
        if (SelectedVoucherId == id)
        {
            SelectedVoucherId = null;
        }
        else
        {
            SelectedVoucherId = id;
            voucher = await voucherServices.Details(id);
            CalculateTotalMoney();
        }

        isModalChooseVoucher = true;
        StateHasChanged();
    }

    private async void CalculateTotalMoney()
    {
        totalAmount = lst_OrderDetail.Sum(item =>
        {
            decimal price = (item.ProductAttributes.Sale_price != null && item.ProductAttributes.Sale_price > 0)
                ? (decimal)item.ProductAttributes.Sale_price.Value
                : (decimal)(item.ProductAttributes.Regular_price ?? 0);

            return item.Quantity * price;
        });

        totalPrincipal = lst_OrderDetail.Sum(item =>
        {
            return item.Quantity * (item.ProductAttributes.Regular_price ?? 0);
        });

        discountAmount = totalPrincipal - totalAmount;

        // tính tiền giảm từ voucher
        decimal percentValue = 0;
        if (voucher != null)
        {
            if (!string.IsNullOrEmpty(voucher.Percent) && !decimal.TryParse(voucher.Percent, out percentValue))
            {
                throw new InvalidOperationException("Percent is not a valid decimal value.");
            }
            if (voucher.Description == "Percentage")
            {
                voucherAmount = (totalAmount * percentValue / 100);
                if (voucherAmount >= Convert.ToDecimal(voucher.MaxDiscountValue ?? "0"))
                {
                    voucherAmount = Convert.ToDecimal(voucher.MaxDiscountValue ?? "0");
                }
            }
            else if (voucher.Description == "Fixed")
            {
                voucherAmount = percentValue;
            }
        }


        totalQuantity = lst_OrderDetail.Sum(item => item.Quantity);

        totalMoney = feeShipping + totalAmount - voucherAmount;
        if (totalMoney <= 0)
        {
            totalMoney = 0;
        }
        StateHasChanged();
    }

    private async Task CreateModalOrder()
    {
        List<Cart_details> cartDetailsToProcess = new List<Cart_details>();

        if (user != null && user.Id > 0)
        {
            cartDetailsToProcess = lst_CartDetails.Where(c => selectedCartDetails.Contains(c.Id)).ToList();
        }
        else // Người dùng chưa đăng nhập
        {
            try
            {

                var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
                if (!string.IsNullOrEmpty(cartJson))
                {
                    var localCart = JsonSerializer.Deserialize<List<CartProduct>>(cartJson);
                    var selectedProducts = localCart.Where(cp => selectedCartDetails.Contains(cp.Product_id)).ToList();

                    cartDetailsToProcess = selectedProducts.Select(cp => new Cart_details
                        {
                            Product_id = cp.Product_id,
                            Quantity = cp.Quantity
                        }).ToList();

                    foreach (var cartDetail in cartDetailsToProcess)
                    {
                        var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id ?? 0);
                        if (productAttribute != null)
                        {
                            cartDetail.Product_Attributes = productAttribute;
                        }
                        else
                        {
                            await JS.InvokeVoidAsync("toastr.error", $"Không tìm thấy thông tin sản phẩm với ID {cartDetail.Product_id}");
                            return;
                        }
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("toastr.error", "Giỏ hàng trống, vui lòng thêm sản phẩm trước khi đặt hàng.");
                    return;
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Lỗi khi xử lý dữ liệu giỏ hàng: {ex.Message}");
                return;
            }
        }

        foreach (var cartDetail in cartDetailsToProcess)
        {
            if (cartDetail.Product_Attributes.Stock == null || cartDetail.Product_Attributes.Stock <= 0)
            {
                await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm {cartDetail.Product_Attributes.SKU} không đủ số lượng.");
                return;
            }

                if (cartDetail.Quantity > cartDetail.Product_Attributes.Stock)
                {
                    await JS.InvokeVoidAsync("toastr.error", $"Xin lỗi, sản phẩm {cartDetail.Product_Attributes.SKU} không đủ số lượng trong kho.");
                    return;
                }
            }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận tạo đơn hàng?");
        if (confirmed)
        {
            isModalOrderVisiable = true;
            voucher = null;
            SelectedVoucherId = null;
            voucherAmount = 0;
            try
            {
                if (user != null && user.Id > 0) // Người dùng đã đăng nhập
                {
                    var ordersUser = await orderServices.GetOrderByIdUser(user.Id);
                    var existingOrderPending = ordersUser?.FirstOrDefault(o => o.Status == "Pending");
                    if (existingOrderPending != null)
                    {
                        // Xóa sản phẩm trong đơn hàng cũ
                        var existingOrderDetails = await orderDetailsServices.GetOrderDetailsByOrderId(existingOrderPending.Id);
                        foreach (var detail in existingOrderDetails)
                        {
                            await orderDetailsServices.Delete(detail.Id);
                        }

                        order = existingOrderPending;
                    }
                    else
                    {
                        order = await CreateNewOrder();
                    }
                }
                else
                {
                    order = await CreateNewOrder();
                    var orderJson = JsonSerializer.Serialize(order);
                    await JS.InvokeVoidAsync("localStorage.setItem", "pendingOrder", orderJson);
                }

                if (order != null)
                {
                    foreach (var cartDetail in cartDetailsToProcess)
                    {
                        var newOrderDetail = new Order_details
                            {
                                OrderId = order.Id,
                                Product_Attribute_Id = cartDetail.Product_Attributes.Id,
                                Quantity = cartDetail.Quantity ?? 0,
                                TotalDiscount = cartDetail.Product_Attributes.Sale_price,
                                UnitPrice = cartDetail.Product_Attributes.Regular_price
                            };
                        await orderDetailsServices.Create(newOrderDetail);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error occurred: " + ex.ToString());
            }

            await LoadOrderDetails();
            await LoadCartDetails();
            StateHasChanged();
            CalculateTotalMoney();
        }
    }





    private async Task<Orders> CreateNewOrder()
    {
        var newOrder = new Orders
            {
                User_id = user != null && user.Id > 0 ? user.Id : null,
                Created_at = DateTime.Now,
                Note = "Giao hàng",
                Status = "Pending"
            };

        return await orderServices.Create(newOrder);
    }

    private async Task ConfirmDeleteOrder()
    {
        // Hiển thị xác nhận trước khi xóa
        bool confirmed = await JS.InvokeAsync<bool>("confirm",
            "Bạn có chắc về hành động này? Lưu ý: Hóa đơn xóa không thể khôi phục!");
        if (confirmed)
        {
            try
            {
                // Xóa hóa đơn theo ID trong cơ sở dữ liệu
                if (order != null && order.Id > 0)
                {
                    await orderServices.Delete(order.Id);
                }

                // Xóa hóa đơn khỏi LocalStorage
                var pendingOrderJson = await JS.InvokeAsync<string>("localStorage.getItem", "pendingOrder");
                if (!string.IsNullOrEmpty(pendingOrderJson))
                {
                    var pendingOrder = JsonSerializer.Deserialize<Orders>(pendingOrderJson);
                    if (pendingOrder != null && pendingOrder.Id == order.Id)
                    {
                        await JS.InvokeVoidAsync("localStorage.removeItem", "pendingOrder");
                    }
                }

                order = null;
                lst_OrderDetail.Clear();
                isModalOrderVisiable = false;
                await LoadCartDetails();
                await JS.InvokeVoidAsync("toastr.success", "Hóa đơn đã được xóa thành công.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi xóa hóa đơn: {ex.Message}");
                await JS.InvokeVoidAsync("toastr.error", "Đã xảy ra lỗi khi xóa hóa đơn. Vui lòng thử lại.");
            }
        }
    }

    // Code Cũ ===============

    // private async Task CreateModalOrder()
    // {
    //     // Kiểm tra số lượng sản phẩm trong kho cho tất cả các item trong selectedCartDetails
    //     foreach (var cartDetailId in selectedCartDetails)
    //     {
    //         var cartDetail = lst_CartDetails.FirstOrDefault(item => item.Id == cartDetailId);
    //         if(cartDetail.Product_Attributes.Stock == null || cartDetail.Product_Attributes.Stock <= 0)
    //         {
    //             await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm với ID {cartDetailId} số lượng không đủ.");
    //             return;
    //         }
    //         if (cartDetail == null)
    //         {
    //             await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm với ID {cartDetailId} không tồn tại trong giỏ hàng.");
    //             return;
    //         }

    //         var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id??0);
    //         if (productAttribute == null)
    //         {
    //             await JS.InvokeVoidAsync("toastr.error", $"Sản phẩm với ID {cartDetail.Product_id} không tồn tại.");
    //             return;
    //         }

    //         if (cartDetail.Quantity > productAttribute.Stock)
    //         {
    //             await JS.InvokeVoidAsync($"toastr.error", $"Xin lỗi quý khách, sản phẩm {cartDetail.Product_Attributes.SKU} hiện không đủ số lượng quý khách mong muốn!");
    //             return;
    //         }

    //     }

    //     bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận tạo đơn hàng?");
    //     if (confirmed)
    //     {
    //         isModalOrderVisiable = true;
    //         try
    //         {
    //             // Lấy danh sách đơn hàng của người dùng
    //             var ordersUser = await orderServices.GetOrderByIdUser(user.Id);
    //             if (ordersUser == null)
    //             {
    //                 await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy thông tin đơn hàng cho người dùng này.");
    //                 return;
    //             }
    //             var existingOrderPending = ordersUser.FirstOrDefault(o => o.Status == "Pending");

    //             // Nếu tồn tại đơn hàng "Pending", sử dụng lại
    //             if (existingOrderPending != null)
    //             {
    //                 order = existingOrderPending;
    //             }
    //             else
    //             {
    //                 if (user == null)
    //                 {
    //                     await JS.InvokeVoidAsync("toastr.warning", "Người dùng không hợp lệ!");
    //                     return;
    //                 }

    //                 // Tạo đơn hàng mới
    //                 var newOrder = new Orders
    //                     {
    //                         User_id = user?.Id,
    //                         Created_at = DateTime.Now,
    //                         Note = "Giao hàng",
    //                         Status = "Pending"
    //                     };

    //                 var createdOrder = await orderServices.Create(newOrder);
    //                 if (createdOrder != null)
    //                 {
    //                     order = createdOrder;
    //                 }
    //                 else
    //                 {
    //                     await JS.InvokeVoidAsync("toastr.error", "Không thể tạo đơn hàng mới!");
    //                     return;
    //                 }
    //             }

    //             if (order != null)
    //             {
    //                 // Khởi tạo danh sách order detail nếu chưa có
    //                 if (lst_OrderDetail == null)
    //                 {
    //                     lst_OrderDetail = new List<Order_details>();
    //                 }

    //                 // Thêm các item từ selectedCartDetails vào lst_OrderDetail
    //                 foreach (var cartDetailId in selectedCartDetails)
    //                 {
    //                     var cartDetail = lst_CartDetails.FirstOrDefault(item => item.Id == cartDetailId);
    //                     if (cartDetail == null)
    //                     {
    //                         Console.WriteLine($"Cart detail with ID {cartDetailId} not found in lst_CartDetails.");
    //                         continue;
    //                     }

    //                     // Kiểm tra thông tin sản phẩm
    //                     var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id??0);
    //                     if (productAttribute == null)
    //                     {
    //                         Console.WriteLine($"Product attribute for ID {cartDetail.Product_id} not found.");
    //                         continue;
    //                     }

    //                     // Kiểm tra xem sản phẩm đã có trong order details chưa
    //                     var existingDetail = await orderDetailsServices.GetByOrderIdAndProductAttributeId(order.Id, cartDetail.Product_Attributes.Id);
    //                     if (existingDetail == null)
    //                     {
    //                         var newOrderDetail = new Order_details
    //                             {
    //                                 OrderId = order.Id,
    //                                 Product_Attribute_Id = cartDetail.Product_Attributes.Id,
    //                                 Quantity = cartDetail.Quantity??0,
    //                                 TotalDiscount = cartDetail.Product_Attributes.Sale_price,
    //                                 UnitPrice = cartDetail.Product_Attributes.Regular_price
    //                             };
    //                         await orderDetailsServices.Create(newOrderDetail);
    //                         lst_OrderDetail.Add(newOrderDetail); // Thêm vào lst_OrderDetail
    //                     }
    //                     else
    //                     {
    //                         existingDetail.Quantity = cartDetail.Quantity??0;
    //                         existingDetail.UnitPrice = cartDetail.Product_Attributes.Regular_price;
    //                         existingDetail.TotalDiscount = cartDetail.Product_Attributes.Sale_price;
    //                         await orderDetailsServices.Update(existingDetail, existingDetail.Id);
    //                     }
    //                 }

    //                 // Xóa các item không còn trong selectedCartDetails
    //                 var allOrderDetails = await orderDetailsServices.GetOrderDetailsByOrderId(order.Id);
    //                 foreach (var detail in allOrderDetails)
    //                 {
    //                     bool shouldDelete = !lst_CartDetails
    //                         .Where(item => selectedCartDetails.Contains(item.Id))
    //                         .Any(item => item.Product_Attributes.Id == detail.Product_Attribute_Id);

    //                     if (shouldDelete)
    //                     {
    //                         await orderDetailsServices.Delete(detail.Id);
    //                     }
    //                 }
    //             }
    //         }
    //         catch (Exception ex)
    //         {
    //             Console.WriteLine("Error occurred: " + ex.ToString()); // Log the complete error
    //         }
    //         await LoadOrderDetails();
    //         await LoadCartDetails();
    //         StateHasChanged();
    //         CalculateTotalMoney();
    //     }
    // }

    private async Task CloseModalOrder()
    {
        isModalOrderVisiable = false;
        selectedCartDetails.Clear();
    }

    private async Task LoadOrderDetails()
    {
        try
        {
            lst_OrderDetail = await orderDetailsServices.GetOrderDetailsByOrderId(order.Id);
            CalculateTotalMoney();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP Request Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Không thể tải thông tin chi tiết đơn hàng. Vui lòng thử lại sau.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected Error: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Đã xảy ra lỗi không xác định. Vui lòng thử lại sau.");
        }
    }


    private async Task ChoseAddressModal()
    {
        isModalAddressVisiable = true;
        lst_Address = await addressServices.GetAddressByUserId(user.Id);
        StateHasChanged();
    }

    private async Task CloseAddressModal()
    {
        isModalAddressVisiable = false;
    }

    private async Task CreateAddressModal()
    {
        isModalCreateAddress = true;
    }

    private async Task CreateAddress()
    {
        if (string.IsNullOrEmpty(address.Ward_commune) || string.IsNullOrEmpty(address.Province_city) || string.IsNullOrEmpty(address.District))
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng nhập đầy đủ thông tin địa chỉ.");
            return;
        }
        if (string.IsNullOrEmpty(address.Phone) || !Regex.IsMatch(address.Phone, @"^0\d{9}$"))
        {
            await JS.InvokeVoidAsync("toastr.error", "Số điện thoại không hợp lệ. Vui lòng nhập số điện thoại bắt đầu bằng 0 và có 10 chữ số.");
            return;
        }

        if (user != null && user.Id > 0) // Người dùng đã đăng nhập
        {
            var orderPending = await orderServices.GetByIdOrders(order.Id);
            if (orderPending?.User_id.HasValue == true)
            {
                address.User_Id = orderPending.User_id.Value; // Gắn User_Id từ Order
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy người dùng liên kết với đơn hàng.");
                return;
            }
        }
        else // Người dùng chưa đăng nhập
        {
            address.User_Id = null;
        }

        if (address.Type == null) address.Type = "";
        if (address.Status == null) address.Status = "";

        var province = provinces.FirstOrDefault(p => p.ProvinceID.ToString() == address.Province_city);
        var district = districts.FirstOrDefault(d => d.DistrictID.ToString() == address.District);
        var ward = wards.FirstOrDefault(w => w.WardCode.ToString() == address.Ward_commune);
        var codeWard = wards.FirstOrDefault(w => w.WardCode.ToString() == address.Ward_commune);
        var districtId = districts.FirstOrDefault(w => w.DistrictID.ToString() == address.District);

        address.Province_city = province?.ProvinceName;
        address.District = district?.DistrictName;
        address.Ward_commune = ward?.WardName;
        address.WardCode = codeWard?.WardCode;
        address.DistrictId = districtId?.DistrictID;

        try
        {
            var result = await addressServices.CreateAddressNoLogin(address);

            if (result != null)
            {
                await JS.InvokeVoidAsync("toastr.success", "Địa chỉ đã được tạo thành công.");
                isModalCreateAddress = false;

                // Cập nhật vào Order
                if (user != null && user.Id > 0) // Người dùng đã đăng nhập
                {
                    lst_Address = await addressServices.GetAddressByUserId(address.User_Id.Value);
                }
                else
                {
                    if (order != null)
                    {
                        order.Address_Id = result.Id;
                        order.Strees = $"{address.Street} - {address.Ward_commune} - {address.District} - {address.Province_city}";
                        await orderServices.Update(order, order.Id);
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("toastr.error", "Không thể tạo đơn hàng mới cho khách chưa đăng nhập.");
                    }
                }

                // Lưu vào localStorage
                var localStorageAddresses = await JS.InvokeAsync<string>("localStorage.getItem", "addresses");
                var addresses = string.IsNullOrEmpty(localStorageAddresses)
                    ? new List<Address>()
                    : Newtonsoft.Json.JsonConvert.DeserializeObject<List<Address>>(localStorageAddresses);

                addresses.Add(result);
                await JS.InvokeVoidAsync("localStorage.setItem", "addresses", Newtonsoft.Json.JsonConvert.SerializeObject(addresses));
                await LoadUserAddresses();
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Tạo địa chỉ thất bại.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tạo địa chỉ: {ex.Message}");
            await JS.InvokeVoidAsync("toastr.error", "Đã xảy ra lỗi khi tạo địa chỉ.");
        }
    }


    // private async Task CreateAddress()
    // {
    //     if (string.IsNullOrEmpty(address.Ward_commune) || string.IsNullOrEmpty(address.Province_city) || string.IsNullOrEmpty(address.District))
    //     {
    //         await JS.InvokeVoidAsync("toastr.error", "Vui lòng nhập đầy đủ thông tin địa chỉ.");
    //         return;
    //     }
    //     if (string.IsNullOrEmpty(address.Phone) || !Regex.IsMatch(address.Phone, @"^0\d{9}$"))
    //     {
    //         await JS.InvokeVoidAsync("toastr.error", "Số điện thoại không hợp lệ. Vui lòng nhập số điện thoại bắt đầu bằng 0 và có 10 chữ số.");
    //         return;
    //     }

    //     if (user != null && user.Id > 0) // Người dùng đã đăng nhập
    //     {
    //         var orderPending = await orderServices.GetByIdOrders(order.Id);
    //         if (orderPending?.User_id.HasValue == true)
    //         {
    //             address.User_Id = orderPending.User_id.Value; // Gắn User_Id từ Order
    //         }
    //         else
    //         {
    //             await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy người dùng liên kết với đơn hàng.");
    //             return;
    //         }
    //     }
    //     else // Người dùng chưa đăng nhập
    //     {
    //         // Gắn một Id mặc định cho khách chưa đăng nhập
    //         address.User_Id = null;
    //     }

    //     // Xử lý thông tin địa chỉ
    //     if (address.Type == null) address.Type = "";
    //     if (address.Status == null) address.Status = "";

    //     var province = provinces.FirstOrDefault(p => p.ProvinceID.ToString() == address.Province_city);
    //     var district = districts.FirstOrDefault(d => d.DistrictID.ToString() == address.District);
    //     var ward = wards.FirstOrDefault(w => w.WardCode.ToString() == address.Ward_commune);
    //     var codeWard = wards.FirstOrDefault(w => w.WardCode.ToString() == address.Ward_commune);
    //     var districtId = districts.FirstOrDefault(w => w.DistrictID.ToString() == address.District);

    //     address.Province_city = province?.ProvinceName;
    //     address.District = district?.DistrictName;
    //     address.Ward_commune = ward?.WardName;
    //     address.WardCode = codeWard?.WardCode;
    //     address.DistrictId = districtId?.DistrictID;

    //     try
    //     {
    //         var result = await addressServices.CreateAddressNoLogin(address);

    //         if (result != null)
    //         {
    //             await JS.InvokeVoidAsync("toastr.success", "Địa chỉ đã được tạo thành công.");
    //             isModalCreateAddress = false;

    //             if (user != null && user.Id > 0) // Người dùng đã đăng nhập
    //             {
    //                 lst_Address = await addressServices.GetAddressByUserId(address.User_Id.Value);
    //             }
    //             else // Gắn địa chỉ vào đơn hàng cho khách chưa đăng nhập
    //             {

    //                 if (order != null)
    //                 {
    //                     order.Address_Id = result.Id;
    //                     order.Strees = $"{address.Street} - {address.Ward_commune} - {address.District} - {address.Province_city}";
    //                     await orderServices.Update(order, order.Id);
    //                 }
    //                 else
    //                 {
    //                     await JS.InvokeVoidAsync("toastr.error", "Không thể tạo đơn hàng mới cho khách chưa đăng nhập.");
    //                 }
    //             }
    //         }
    //         else
    //         {
    //             await JS.InvokeVoidAsync("toastr.error", "Tạo địa chỉ thất bại.");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Lỗi khi tạo địa chỉ: {ex.Message}");
    //         await JS.InvokeVoidAsync("toastr.error", "Đã xảy ra lỗi khi tạo địa chỉ.");
    //     }
    // }



    private void CloseCreateAddress()
    {
        isModalCreateAddress = false;
    }

    // tách được đoạn code này ra chỗ khác thì càng tốt
    private List<Provinces> provinces = new List<Provinces>();
    private List<Districts> districts = new List<Districts>();
    private List<Wards> wards = new List<Wards>();
    private bool hasDistricts = false;
    private bool hasWards = false;
    private string selectedProvinceId;
    private string selectedDistrictId;
    private string selectedWardId;
    [Inject] private AddressService address_Service { get; set; }
    private async Task OnProvinceChange(ChangeEventArgs e)
    {
        selectedProvinceId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedProvinceId))
        {
            // Thiết lập tỉnh hiện tại và xóa các quận huyện, xã
            address.Province_city = selectedProvinceId;
            districts = await address_Service.GetDistrictsByProvinceAsync(int.Parse(selectedProvinceId));
            hasDistricts = districts.Count > 0;
            wards.Clear();
            hasWards = false;
        }
    }
    private async Task OnDistrictChange(ChangeEventArgs e)
    {
        selectedDistrictId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedDistrictId))
        {
            address.District = selectedDistrictId;
            wards = await address_Service.GetWardsByDistrictAsync(int.Parse(selectedDistrictId));
            hasWards = wards.Count > 0;
        }
    }
    private async Task OnWardChange(ChangeEventArgs e)
    {
        selectedWardId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedWardId))
        {
            address.Ward_commune = selectedWardId;
        }
    }
    // Các biến để bind vào form
    private string city;
    private string district;
    private string ward;
    private string street;
    private string phone;
    private string name;
    private Address selectedAddress;

    // private async Task SelectAddress(Address address)
    // {
    //     ClearInfoAddress();
    //     if (address != null)
    //     {
    //         selectedAddress = address;
    //         city = address.Province_city;
    //         district = address.District;
    //         ward = address.Ward_commune;
    //         street = address.Street;
    //         phone = address.User?.Phone;
    //     }
    //     var orderPending = await orderServices.GetByIdOrders(order.Id);
    //     orderPending.Address_Id = selectedAddress.Id;
    //     orderPending.CreatedByAdminId = null;
    //     await orderServices.Update(orderPending, orderPending.Id);
    //     var shippingRequest = new ShippingRequest
    //         {
    //             service_type_id = 2,
    //             to_district_id = address.DistrictId,
    //             to_ward_code = address.WardCode.ToString(),
    //             length = 100,
    //             width = 80,
    //             height = 5,
    //             weight = 1000,
    //             insurance_value = 500000,
    //             coupon = null,
    //             cod_failed_amount = null,
    //             cod_value = null
    //         };
    //     feeShipping = await address_Service.CalculateShippingFee(shippingRequest);
    //     isModalAddressVisiable = false;
    //     isModalAddressVisiable = false;
    //     CalculateTotalMoney();
    // }

    private async Task SelectAddress(Address address)
    {
        ClearInfoAddress();
        if (address != null)
        {
            selectedAddress = address;
            city = address.Province_city;
            district = address.District;
            ward = address.Ward_commune;
            street = address.Street;
            phone = address.Phone;
            name = address.Name;
        }

        // Lấy thông tin đơn hàng đang chờ
        var orderPending = await orderServices.GetByIdOrders(order.Id);
        if (orderPending != null)
        {
            orderPending.Address_Id = selectedAddress.Id;
            orderPending.CreatedByAdminId = null;

            // Cập nhật địa chỉ vào đơn hàng
            await orderServices.Update(orderPending, orderPending.Id);
        }

        // Tạm thời bỏ qua phần phí ship
        var shippingRequest = new ShippingRequest
            {
                service_type_id = 2,
                to_district_id = address.DistrictId,
                to_ward_code = address.WardCode.ToString(),
                length = 100,
                width = 80,
                height = 5,
                weight = 1000,
                insurance_value = 500000,
                coupon = null,
                cod_failed_amount = null,
                cod_value = null
            };
        feeShipping = await address_Service.CalculateShippingFee(shippingRequest);

        isModalAddressVisiable = false;
        CalculateTotalMoney(); // Tính lại tổng số tiền (không tính phí ship)
        StateHasChanged();
    }


    private void ClearInfoAddress()
    {
        selectedAddress = null;
        city = string.Empty;
        district = string.Empty;
        ward = string.Empty;
        street = string.Empty;
        phone = string.Empty;
    }
    private async Task ResetViewState()
    {
        totalAmount = 0;
        totalQuantity = 0;
        totalMoney = 0;
        feeShipping = 0;
        totalPrincipal = 0;
        discountAmount = 0;
        lst_OrderDetail.Clear();
        isModalOrderVisiable = false;
        ClearInfoAddress();
        await LoadOrderDetails();
        await LoadCartDetails();
        StateHasChanged();
    }

    private string momoError = null;
    private string? ErrorCode;
    private string payUrl { get; set; }
    private bool isMomoModalVisible = false;

    private async Task PayByCash()
    {
        if (selectedAddress == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn địa chỉ giao hàng!");
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận thanh toán khi nhận hàng ?");
        if (confirmed)
        {
            if (SelectedVoucherId != null)
            {
                var appliedVoucher = await userVoucherServices.GetByVoucherIdAndUserId(SelectedVoucherId ?? 0, user.Id);
                appliedVoucher.IsApplied = true;
                await userVoucherServices.Update(appliedVoucher);
            }
            CheckOut("cash");

            if (user != null && user.Id > 0) // Người dùng đã đăng nhập
            {
                foreach (var cartDetailId in selectedCartDetails)
                {
                    // var cartDetail = lst_CartDetails.FirstOrDefault(item => item.Id == cartDetailId);
                    // var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id ?? 0);
                    // productAttribute.Stock -= cartDetail.Quantity; // khi đặt hàng thì chưa trừ số lượng => đợi nhân viên xác nhận rồi mới trừ
                    // await productAttributeServices.Update(productAttribute, productAttribute.Id);
                    await cartDetailsService.Delete(cartDetailId);
                }
            }
            else // Người dùng chưa đăng nhập
            {
                await RemoveSelectedFromLocalStorage();
                await RemovePaidOrderFromLocalStorage(); // Gọi thêm phương thức xóa Order từ LocalStorage
            }

            // Áp dụng Voucher nếu có
            if (SelectedVoucherId != null && SelectedVoucherId > 0)
            {
                var appliedVoucher = await userVoucherServices.GetByVoucherIdAndUserId(SelectedVoucherId.Value, user.Id);
                if (appliedVoucher != null)
                {
                    appliedVoucher.IsApplied = true;
                    await userVoucherServices.Update(appliedVoucher);
                }
            }

            selectedCartDetails.Clear();
            await LoadOrderDetails();
            await LoadCartDetails();
            await ResetViewState();
            StateHasChanged();
        }
    }




    private async Task PayByMomo()
    {
        if (selectedAddress == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Vui lòng chọn địa chỉ giao hàng!");
            return;
        }
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận thanh toán bằng hình thức chuyển khoản MOMO ?");
        if (confirmed)
        {
            CheckOut("momo");
        }
    }

    private async Task ConfirmMomoPayment()
    {
        var updateitem = await orderServices.GetByIdOrders(order.Id);
        if (updateitem.Status == "Chờ xác nhận")
        {
            if (user != null && user.Id > 0) // Người dùng đã đăng nhập
            {
                foreach (var cartDetailId in selectedCartDetails)
                {
                    var cartDetail = lst_CartDetails.FirstOrDefault(item => item.Id == cartDetailId);
                    var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id ?? 0);
                    productAttribute.Stock -= cartDetail.Quantity;
                    await productAttributeServices.Update(productAttribute, productAttribute.Id);
                    await cartDetailsService.Delete(cartDetailId);
                }
            }
            else // Người dùng chưa đăng nhập
            {
                await RemoveSelectedFromLocalStorage();
            }

            var orderUpdate = await orderServices.GetByIdOrders(order.Id);
            var newOrderTracking = new order_trackings
                {
                    OrderId = orderUpdate.Id,
                    Note = "Khách đã thanh toán MOMO",
                    Status = "Chờ xác nhận",
                    Created_at = DateTime.Now
                };
            await orderTrackingServices.AddOrderTracking(newOrderTracking);
            var appliedVoucher = await userVoucherServices.GetByVoucherIdAndUserId(SelectedVoucherId ?? 0, user.Id);
            appliedVoucher.IsApplied = true;
            await userVoucherServices.Update(appliedVoucher);
            await JS.InvokeVoidAsync("toastr.success", $"Thanh toán thành công");
            isMomoModalVisible = false;
            selectedCartDetails.Clear();
            StateHasChanged();
            await LoadOrderDetails();
            await LoadCartDetails();
            await ResetViewState();
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", $"Đơn hàng chưa được thanh toán");
        }
    }


    private async Task RemoveSelectedFromLocalStorage()
    {
        var cartJson = await JS.InvokeAsync<string>("localStorage.getItem", "cart");
        if (!string.IsNullOrEmpty(cartJson))
        {
            var cartProducts = JsonSerializer.Deserialize<List<CartProduct>>(cartJson);
            cartProducts = cartProducts?.Where(cp => !selectedCartDetails.Contains(cp.Product_id)).ToList();

            var updatedCartJson = JsonSerializer.Serialize(cartProducts);
            await JS.InvokeVoidAsync("localStorage.setItem", "cart", updatedCartJson);
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", "Cart in localStorage is empty or null.");
        }
    }

    private async Task RemovePaidOrderFromLocalStorage()
{
    try
    {
        // Kiểm tra xem có Order đang chờ trong LocalStorage không
        var pendingOrderJson = await JS.InvokeAsync<string>("localStorage.getItem", "pendingOrder");

        if (!string.IsNullOrEmpty(pendingOrderJson))
        {
            // Nếu tồn tại, xóa Order này
            await JS.InvokeVoidAsync("localStorage.removeItem", "pendingOrder");
            await JS.InvokeVoidAsync("toastr.success", "Hóa đơn vừa thanh toán đã được xóa khỏi LocalStorage.");
        }
        else
        {
            // Nếu không tồn tại, thông báo không có hóa đơn nào
            await JS.InvokeVoidAsync("toastr.info", "Không tìm thấy hóa đơn nào trong LocalStorage để xóa.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Lỗi khi xóa hóa đơn từ LocalStorage: {ex.Message}");
        await JS.InvokeVoidAsync("toastr.error", "Đã xảy ra lỗi khi xóa hóa đơn từ LocalStorage.");
    }
}



    private async Task CancelMomoPayment()
    {
        var updateitem = await orderServices.GetByIdOrders(order.Id);
        if (updateitem.Status == "Chờ xác nhận")
        {
            foreach (var cartDetailId in selectedCartDetails)
            {
                var cartDetail = lst_CartDetails.FirstOrDefault(item => item.Id == cartDetailId);
                var productAttribute = await productAttributeServices.GetProductAttributesById(cartDetail.Product_id ?? 0);
                productAttribute.Stock -= cartDetail.Quantity;
                await productAttributeServices.Update(productAttribute, productAttribute.Id);
                await cartDetailsService.Delete(cartDetailId);
            }
            var orderUpdate = await orderServices.GetByIdOrders(order.Id);
            var newOrderTracking = new order_trackings
                {
                    OrderId = orderUpdate.Id,
                    Note = "Khách đã thanh toán MOMO",
                    Status = "Chờ xác nhận",
                    Created_at = DateTime.Now
                };
            await orderTrackingServices.AddOrderTracking(newOrderTracking);
            var newOrder = new Orders
                {
                    User_id = user?.Id,
                    Created_at = DateTime.Now,
                    Note = "Giao hàng",
                    Status = "Pending"
                };
            await orderServices.Create(newOrder);
            var appliedVoucher = await userVoucherServices.GetByVoucherIdAndUserId(SelectedVoucherId ?? 0, user.Id);
            appliedVoucher.IsApplied = true;
            await userVoucherServices.Update(appliedVoucher);
            await JS.InvokeVoidAsync("toastr.success", $"Đơn hàng đã được thành công rồi");
            isMomoModalVisible = false;
            selectedCartDetails.Clear();
            StateHasChanged();
            await LoadOrderDetails();
            await LoadCartDetails();
            await ResetViewState();
        }
        else
        {
            isMomoModalVisible = false;
            await LoadOrderDetails();
            await LoadCartDetails();
            StateHasChanged();
        }
    }

    private void ShowMomoModal(string momoUrl)
    {
        payUrl = momoUrl;
        isMomoModalVisible = true;
        StateHasChanged();
    }

    private async Task CheckOut(string paymentMethod)
    {
        if (lst_OrderDetail.Count == 0 || !lst_OrderDetail.Any() || lst_OrderDetail == null)
        {
            await JS.InvokeVoidAsync("toastr.error", "Đơn hàng chưa có sản phẩm nào!");
            return;
        }
        var orderUpdate = await orderServices.GetByIdOrders(order.Id);
        if (orderUpdate != null)
        {
            CalculateTotalMoney();
            orderUpdate.TotalAmount = totalAmount;
            orderUpdate.TotalPrincipal = totalPrincipal;
            orderUpdate.Totalmoney = totalMoney;
            orderUpdate.FeeShipping = feeShipping;
            orderUpdate.TotalVoucher = voucherAmount;
            orderUpdate.Address_Id = selectedAddress.Id;
            orderUpdate.Strees = $"{selectedAddress.Street} - {selectedAddress.Ward_commune} - {selectedAddress.District} - {selectedAddress.Province_city}";
            string typePay = "";
            if (paymentMethod == "momo")
            {
                try
                {
                    var momoResponse = await orderServices.CreateMomoPaymentUrl(user.Name, orderUpdate.Totalmoney ?? 0, $"Thanh toán hóa đơn {order.Id}");
                    if (!string.IsNullOrEmpty(momoResponse.PayUrl))
                    {

                        orderUpdate.TypePayment = "Chuyển khoản MoMo";
                        typePay = "Đã thanh toán";
                        ShowMomoModal(momoResponse.PayUrl);
                        await orderServices.Update(orderUpdate, orderUpdate.Id);
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("toastr.error", "Không thể tạo giao dịch MoMo.");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("toastr.error", $"Lỗi khi xử lý thanh toán MoMo: {ex.Message}");
                    return;
                }
            }
            else
            {
                orderUpdate.TypePayment = "Thanh toán khi nhận hàng";
                orderUpdate.Status = "Chờ xác nhận";
                typePay = "Chờ xác nhận";
                await orderServices.Update(orderUpdate, orderUpdate.Id);
                await JS.InvokeVoidAsync("toastr.success", "Yêu cầu đặt đơn hàng đã được gửi thành công!");
                var newOrderTracking = new order_trackings
                    {
                        OrderId = orderUpdate.Id,
                        Note = "Khách hàng thanh toán khi nhận hàng",
                        Status = typePay,
                        Created_at = DateTime.Now,
                        Created_by = null
                    };
                await orderTrackingServices.AddOrderTracking(newOrderTracking);

            }
            if (orderUpdate.Status == "Chờ xác nhận")
            {
                var fileBytes = await orderServices.ExportInvoice(orderUpdate.Id);
                var attachmentFileName = $"hoa_don_{orderUpdate.Id}.pdf";
                var emailUser = user.Email;
                string emailSubject = "YÊU CẦU ĐẶT HÀNG THÀNH CÔNG";
                string emailMessage = $@"
                                    <!DOCTYPE html>
                                    <html>
                                    <head>
                                        <meta charset='utf-8'>
                                        <title>{emailSubject}</title>
                                    </head>
                                    <body>
                                        <h2>Yêu cầu đặt hàng thành công</h2>
                                        <p>Xin chào {user.Name}. Cảm ơn bạn đã lựa chọn tin tưởng HangKenh. Yêu cầu đặt hàng đơn hàng {orderUpdate.Id} đã được gửi đi.</p>
                                        <p>Thông tin đơn hàng của bạn:</p>
                                        <ul>
                                            <li><strong> ID đơn hàng:</strong> {orderUpdate.Id}</li>
                                            <li><strong>Tổng tiền:</strong> {orderUpdate.Totalmoney} VNĐ</li>
                                        </ul>
                                        <p>Hãy theo dõi đơn hàng của bạn tại đại Website HANGKENH</p>
                                        <p>Cảm ơn bạn đã chọn HangKenh!</p>
                                        <p>Trân trọng,<br />Đội ngũ HangKenh</p>
                                    </body>
                                    </html>
                                    ";

                try
                {
                    await email.SendEmailAsync(emailUser, emailSubject, emailMessage);
                    await JS.InvokeVoidAsync("toastr.success", "Hóa đơn đã được gửi qua email!");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi gửi hóa đơn qua email: {ex.Message}");
                    await JS.InvokeVoidAsync("toastr.error", "Lỗi khi gửi hóa đơn qua email!");
                }
            }
            await LoadOrderDetails();
            await LoadCartDetails();
            StateHasChanged();
        }
    }
}
