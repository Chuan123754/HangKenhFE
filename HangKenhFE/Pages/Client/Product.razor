@page "/product-detail/{id:long}"
@inject IPostSer postServices
@inject IUserService userServices
@inject IBannerServices bannerServices
@inject ISizeServices sizeServices
@inject IColorServices colorServices
@inject IProductAttributeServies productAttributeServices
@inject ICartService cartServices
@inject IWishlistServices wishlistServices
@inject IProduct_wishlist_Services productattributewishlist
@inject ICartDetailsService cartDetailServices
@using System.Text.Json;
@inject IJSRuntime JS
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

@inject NavigationManager nav
<section class="section-banner">
    <img src="@banner.Meta_data"
         class="w-100 h-100" alt="banner-image-3">
    <div class="title-banner">
        <h1>
            @banner.Name
        </h1>
    </div>
</section>
<section class="product-detail">
    <main class="container">
        <header class="pc">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/"> Trang chủ</a></li>
                    <li class="breadcrumb-item"><a href="/category"> Sản phẩm</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@selectedProduct?.Posts.Title</li>
                </ol>
            </nav>
        </header>
        <section class="product-detail-pc body pc">
            <div class="block-left">
                <div class="image-slider">
                    @if (selectedProduct != null)
                    {
                        foreach (var image in selectedProduct.Posts.Image_library.Split(','))
                        {
                            <img src="@image" class="mb-3" alt="Ảnh sản phẩm" />
                        }
                    }
                </div>
            </div>
            <div class="block-right">
                <div class="product-details">
                    <h2 class="product-name-detail">@selectedProduct?.Posts?.Title</h2>
                    <p class="product-brand">THAM LEN HANGKENH</p>
                    <div class="product-price-rating">
                        <span class="product-price">
                            @if (selectedProduct?.Sale_price != null && selectedProduct?.Sale_price > 0)
                            {
                                <div>
                                    <span style="text-decoration: line-through; color: gray;">
                                        @string.Format("{0:N0}", selectedProduct?.Regular_price).Replace(".", ",") VNĐ
                                    </span>
                                </div>
                                <div>
                                    <span style="font-weight: bold; color: red;">
                                        @string.Format("{0:N0}", selectedProduct?.Sale_price).Replace(".", ",") VNĐ
                                    </span>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <span>
                                        @string.Format("{0:N0}", selectedProduct?.Regular_price).Replace(".", ",") VNĐ
                                    </span>
                                </div>
                            }
                        </span>
                    </div>
                    <span class="product-price">

                        @if (selectedProduct?.Stock <= 0 || selectedProduct?.Stock == null)
                        {
                            <span style="font-weight: bold; color: red;">
                                <p class="size-guide-link">HẾT HÀNG</p>
                            </span>
                        }
                        else
                        {
                            <span class="size-guide-link">Số lượng trong kho : @selectedProduct.Stock</span>
                        }
                    </span>
                    <div class="product-size-guide">
                        <span class="product-size-label">1. Chọn kích thước thảm</span>
                        
                    </div>
                    <div class="w-100 select-option">
                        <select class="product-size-selector w-100" @onchange="OnSizeChanged">
                            @foreach (var size in productAttributes_List.GroupBy(p => p.Size_Id).Select(p => p.FirstOrDefault()).Select(p => p.Size))
                            {
                                <option value="@size.Id">@size.Title</option>
                            }
                        </select>
                    </div>
                    <div class="product-color-guide">
                        <span class="product-color-label">2. Chọn màu sắc</span>
               
                    </div>
                    <div class="row product-color-select">
                        @foreach (var color in productAttributes_List.GroupBy(p => p.Color_Id).Select(p => p.FirstOrDefault()).Select(p => p.Color))
                        {

                            <div class="bg-element-filter bg-element-filter-image @(selectedColorId == color.Id ? "active" : "")"
                                 style="display: flex; gap: 8px; cursor: pointer;"
                                 @onclick="() => OnColorChanged(color.Id)">
                                <div class="color-preview"
                                     style="width: 24px; height: 24px; background-color: @color.Color_code; border-radius: 50%; border: 1px solid #ddd;">
                                </div>
                                <span style="line-height: 24px; font-size: 14px; text-align: center">@color.Title</span>
                            </div>

                        }

                    </div>
                    <div class="product-actions">
                        <button class="btn btn-dark btn-add-to-cart" @onclick="AddToCart">
                            <span class="add-to-cart-text">Thêm vào giỏ hàng</span>
                            <img src="main/assets/images/shop-now.svg" alt="question">
                        </button>
                        <span class="product-detail-btn-like" @onclick="AddToWishlist">
                            <img src="main/assets/images/like.svg"
                                 class="like">
                        </span>
                    </div>
                    <div class="product-details-list">
                        <div>
                            <p>CHẤT LIỆU</p>
                            <p>@selectedProduct?.Material?.Title</p>
                        </div>
                        <div>
                            <p>CÔNG NGHỆ DỆT</p>
                            <p>@selectedProduct?.Textile_Technology?.Title</p>
                        </div>
                        <div>
                            <p>PHONG CÁCH</p>
                            <p>@selectedProduct?.Style?.Title</p>
                        </div>
                        <div>
                            <p>MÔ TẢ</p>
                            <p>@selectedProduct?.Posts.Short_description</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
</section>

<section class="product-detail">
    <div class="container">
        <div class="trending-box">
            <div class="tblock-left position-relative">
                <article class="tblock-information d-flex flex-column justify-content-end">
                    <p class="tblock-description">
                        Có nhiều cách để làm một tấm thảm bằng tay và nhiều chất liệu để bạn lựa chọn. Các
                        loại sợi
                        khác nhau thể hiện các đặc tính khác nhau về độ bền, độ mềm và độ bóng. Một số loại
                        mịn và
                        mát khi chạm vào trong khi một số khác lại mềm mại và ấm áp một cách xa hoa.
                        Ngoài sự quyến rũ rõ ràng hơn của len, lụa và bông, chúng tôi đã khám phá những ưu
                        điểm của
                        các loại sợi đa dạng như tre, lá chuối,
                        mohair, merino và alpaca.
                    </p>
                </article>
                <div>
                    <p class="date">
                        Tháng 10 năm 1997
                    </p>
                    <p class="author">
                        VŨ SƠN DIRECTOR
                    </p>
                </div>
            </div>
            <div class="tblock-right">
                <img src="main/assets/images/product-author.png" />
                <div class="img-desc">
                    <h2>Thảm len hàng kênh</h2>
                </div>
            </div>
        </div>
    </div>
</section>
<section id="trending_detail">
    <div class="container">
        <div class="row">
            <main class="col-md-12">

                <article class="mt-40px">
                    <header>

                        <div class="product-details-list">
                            @((MarkupString)selectedProduct?.Posts.Description)
                        </div>

                    </header>
                </article>

            </main>

        </div>
    </div>
</section>

<section class="relate-product">
    <div class="container">
        <div class="section-box">
            <div class="sub-title">
                Discover Our
            </div>
            <h3 class="title">Bestselling Rugs</h3>
            <div class="text-underline"></div>
        </div>
        <div class="row pc">
            @foreach (var prod in productVariant_list)
            {
                <div class="col-3 product">
                    <figure class="card product-card">
                        <div class="product-image">
                            <a @onclick="() => NavDetails(prod.Id)" class="w-100">
                                <div class="img-wrap">
                                    <img src="@prod.Feature_image"
                                         style="height:403px !important" class="w-100 h-100 object-fit-cover">
                                </div>
                                <div class="img-wrap-hide">
                                    <img src="@GetFirstImageUrl(prod.Image_library)"
                                         style="height:403px !important" class="w-100 h-100 object-fit-cover">
                                </div>
                            </a>
                        </div>
                        <figcaption class="product-info">
                            <a @onclick="() => NavDetails(prod.Id)" class="product-name">@prod.Title</a>
                            <div class="product-description">
                                <span class="description">@prod.Post_categories.FirstOrDefault()?.Categories?.Title</span>
                            </div>
                            <div class="product-price">
                                <span class="price">
                                    @if (prod.MinPrice.HasValue && prod.MaxPrice.HasValue)
                                    {
                                        <div class="product-price">
                                            <span class="price">Giá: @prod.MinPrice - @prod.MaxPrice VND</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div>Chưa có giá</div>
                                    }
                                </span>
                            </div>
                        </figcaption>
                    </figure>
                </div>
            }
        </div>

    </div>
</section>
<nav class="product-detail pc">
    <Pagination TItem="Product_Posts" PageNumber="page_number" TotalPages="total_pages" PageSize="page_size" TotalItems="totalItems" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
</nav>

@code {
    [Parameter]
    public long Id { get; set; }
    private List<Product_Posts> productVariant_list = new List<Product_Posts>();
    private List<Product_Attributes> productAttributes_List = new List<Product_Attributes>();
    private List<Size> lst_Size = new List<Size>();
    private List<Color> lst_Color = new List<Color>();
    private List<Cart_details> lst_CartDetails = new List<Cart_details>();
    private Cart_details cartDetails = new Cart_details();
    private Cart cart = new Cart();
    private Users user = new Users();
    private long? selectedSizeId;
    private long? selectedColorId;
    // private Product_variants? selectPWL;
    private Product_Attributes? selectedProduct;
    private Banner banner = new Banner();

    private long productPostId;

    private string search_query = string.Empty;
    private int page_number = 1;
    private int total_pages = 1;
    private int page_size = 4;
    private int totalItems;
    protected async override Task OnInitializedAsync()
    {
        productAttributes_List = await postServices.GetProductAttributesByPostIdClient(Id);

        if (productAttributes_List == null || !productAttributes_List.Any())
        {
            return;
        }
        lst_Size = productAttributes_List
            .Where(p => p.Size != null)
            .Select(p => p.Size!)
            .DistinctBy(size => size.Id)
            .ToList();

        lst_Color = productAttributes_List
            .Where(p => p.Size_Id == selectedSizeId && p.Color != null)
            .Select(p => p.Color!)
            .Distinct()
            .ToList();

        selectedProduct = productAttributes_List.First();
        selectedSizeId = selectedProduct.Size?.Id ?? 0;
        selectedColorId = selectedProduct.Color?.Id ?? 0;
        productPostId = selectedProduct.Posts?.Id ?? 0;

        if (productPostId > 0)
        {
            banner = await bannerServices.GetBannerByProductPostId(productPostId);
        }

        await LoadPosts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userJsonString = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");

            if (!string.IsNullOrEmpty(userJsonString))
            {
                try
                {
                    // Parse JSON để lấy giá trị id và roles
                    var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJsonString);

                    if (userData != null)
                    {
                        // Lấy UserId
                        if (userData.ContainsKey("Id") && long.TryParse(userData["Id"]?.ToString(), out long result))
                        {
                            user = new Users
                                {
                                    Id = result // Gán ID cho đối tượng 'Users'
                                };
                        }
                        else
                        {
                            user = null; // Nếu không tìm thấy hoặc parse không được, đặt user là null
                        }
                    }
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"Error parsing User JSON: {ex.Message}");
                    user = null; // Nếu JSON không hợp lệ
                }
            }
            else
            {
                user = null; // Nếu dữ liệu session trống
            }
        }
    }


    private void OnColorChanged(long colorId)
    {
        selectedColorId = colorId;
        UpdateSelectedProduct();
    }

    private void OnSizeChanged(ChangeEventArgs e)
    {
        selectedSizeId = Convert.ToInt64(e.Value);
        lst_Color = productAttributes_List
            .Where(p => p.Size_Id == selectedSizeId && p.Color != null)
            .Select(p => p.Color!)
            .Distinct()
            .ToList();
        UpdateSelectedProduct();
    }

    private void UpdateSelectedProduct()
    {
        selectedProduct = productAttributes_List.FirstOrDefault(p =>
            p.Color.Id == selectedColorId && p.Size.Id == selectedSizeId);

        // Nếu không tìm thấy biến thể phù hợp, đặt về null hoặc biến thể mặc định.
        if (selectedProduct == null)
        {
            selectedProduct = productAttributes_List.FirstOrDefault();
        }
    }

    private async Task AddToCart()
    {
        try
        {
            // Kiểm tra xem người dùng đã đăng nhập hay chưa
            if (user != null && user.Id > 0)
            {
                // Lấy tất cả các giỏ hàng
                var cart = await cartServices.GetAll();
                // Kiểm tra giỏ hàng của người dùng
                var cartUser = cart.FirstOrDefault(c => c.UserId == user.Id);
                var productAttribute = await productAttributeServices.GetProductAttributesById(selectedProduct.Id);
                if (cartUser != null)
                {
                    // Giỏ hàng đã tồn tại
                    var cartDetails = await cartDetailServices.GetAll();
                    var existingCartDetail = cartDetails.FirstOrDefault(cd => cd.Product_id == selectedProduct.Id && cd.Cart_id == cartUser.Id);

                    if (productAttribute.Stock <= 0 || productAttribute.Stock == null)
                    {
                        await JS.InvokeVoidAsync("toastr.error", "Xin lỗi, sản phẩm này hiện không đủ.");
                        return;
                    }

                    if (existingCartDetail != null)
                    {
                        if (existingCartDetail.Quantity + 1 > productAttribute.Stock)
                        {
                            await JS.InvokeVoidAsync("toastr.error", $"Số lượng sản phẩm trong kho không đủ.");
                            return;
                        }
                        // Nếu sản phẩm đã tồn tại trong giỏ hàng, cộng dồn số lượng
                        existingCartDetail.Quantity += 1;
                        await cartDetailServices.Update(existingCartDetail);
                    }
                    else
                    {
                        if (1 > productAttribute.Stock)
                        {
                            await JS.InvokeVoidAsync("toastr.error", $"Số lượng sản phẩm trong kho không đủ. Hiện có {productAttribute.Stock} sản phẩm.");
                            return;
                        }
                        var cartDetail = new Cart_details
                            {
                                Cart_id = cartUser.Id,
                                Product_id = selectedProduct.Id,
                                Quantity = 1,
                                Status = "ok"
                            };

                        await cartDetailServices.Create(cartDetail);
                        await JS.InvokeVoidAsync("toastr.success", "Thêm sản phẩm vào giỏ hàng thành công");
                    }
                }
                else
                {
                    var newCart = new Carts
                        {
                            UserId = user.Id,
                        };

                    // Tạo giỏ hàng mới
                    await cartServices.Create(newCart);
                    if (1 > productAttribute.Stock)
                    {
                        await JS.InvokeVoidAsync("toastr.error", $"Số lượng sản phẩm trong kho không đủ. Hiện có {productAttribute.Stock} sản phẩm.");
                        return;
                    }
                    // Sau khi tạo giỏ hàng, thêm sản phẩm vào giỏ hàng
                    var newCartDetail = new Cart_details
                        {
                            Cart_id = newCart.Id, // Sử dụng Id được gán sau khi tạo giỏ hàng
                            Product_id = selectedProduct.Id,
                            Quantity = 1,
                            Status = "ok"
                        };

                    await cartDetailServices.Create(newCartDetail);
                    await JS.InvokeVoidAsync("toastr.success", " Sản phẩm đã được thêm thành công");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Vui lòng đăng nhập trước khi thêm vào giỏ hàng");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toastr.error", "Đã có lỗi xảy ra: " + ex.Message);
        }
    }


    private async void AddToWishlist()
    {
        try
        {
            if (user != null && user.Id > 0)
            {
                var wishlistss = await wishlistServices.GetAll();
                var wishlistUser = wishlistss.Where(c => c.User_id == user.Id).FirstOrDefault();

                if (wishlistUser != null)
                {
                    // Check sản phẩm đã tồn tại trong wishlist chưa
                    var WLP = await productattributewishlist.GetAllPW();
                    var existingWLP = WLP.FirstOrDefault(cd => cd.Product_Posts_Id == Id && cd.Wishlist_id == wishlistUser.Id);

                    if (existingWLP != null)
                    {
                        // Nếu sản phẩm đã tồn tại trong wishlist, thông báo đã tồn tại trong wishlist
                        await JS.InvokeVoidAsync("toastr.error", "Sản phẩm đẫ tồn tại trong wishlist");
                        return;
                    }
                    else
                    {
                        var wislisdetail = new Product_wishlist
                            {
                                Wishlist_id = wishlistUser.Id,
                                Product_Posts_Id = Id,
                            };

                        await productattributewishlist.Create(wislisdetail);
                        await JS.InvokeVoidAsync("toastr.success", "Thêm sản phẩm vào wishlist thành công");
                    }
                }
                else
                {
                    await JS.InvokeVoidAsync("toastr.error", "Wishlist không tồn tại");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Vui lòng đăng nhập trước khi thêm vào wishlist");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toastr.error", "Đã có lỗi xảy ra: " + ex.Message);
        }
    }

    private async Task GoToPage(int page)
    {
        page_number = page;
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        string searchTerm = string.IsNullOrEmpty(search_query) ? "" : search_query;
        productVariant_list  = await postServices.GetByTypeAsyncProduct("product", page_number, page_size, searchTerm);
        totalItems = await postServices.GetTotalCountAsync("product", searchTerm);
        total_pages = (int)Math.Ceiling((double)totalItems / page_size);
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        page_size = newPageSize;
        page_number = 1;
        await LoadPosts();
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        page_number = 1; // Đặt lại trang đầu tiên khi tìm kiếm
        search_query = e.Value?.ToString() ?? string.Empty;
        await LoadPosts();
    }

    private string GetFirstImageUrl(string imageUrls)
    {
        if (string.IsNullOrEmpty(imageUrls))
        {
            return string.Empty;
        }

        var urls = imageUrls.Split(',');
        return urls.FirstOrDefault() ?? string.Empty;
    }

    private async void NavDetails(long id)
    {
        selectedProduct = productAttributes_List.FirstOrDefault(p => p.Id == id);
        StateHasChanged();
        nav.NavigateTo($"/product-detail/{id}", forceLoad: true);

    }
}
<style>
    .bg-element-filter {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        transition: all 0.3s ease;
    }

        .bg-element-filter:hover {
            border-color: #007bff;
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.1);
        }

        .bg-element-filter.active {
            border: 1px solid #007bff;
            background-color: #e7f1ff;
        }

</style>