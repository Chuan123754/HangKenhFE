@page "/user/orders"
@inject NavigationManager nav
@inject IOrderIServices orderService
@inject OrderDetailsIServices orderDetailsService
@inject IOrderTrackingServices OrderTrackingService
@inject IJSRuntime JS
@using System.Text.Json;

<style>
    .text-bold {
        font-weight: bold;
    }

    .badge {
        padding: 0.3em 0.6em;
        color: white;
        font-size: 14px;
    }

    .customer-badge {
        display: inline-block;
        padding: 0.5em 1em;
        border-radius: 50px;
        border: 1px solid gray;
        background-color: #C0C0C0;
        font-size: 14px;
        color: #333;
        color: g
    }

    .bg-taiquay {
        background-color: #CCCC99;
        color: black;
    }

    .bg-giaohang {
        background-color: #FFCC99;
        color: black;
    }

    .bg-danger {
        background-color: red;
    }

    .bg-success {
        background-color: green;
    }

    .bg-secondary {
        background-color: gray;
    }

    .page-wrapper {
        padding: 20px 0;
        border: none; /* Xóa viền */
    }

    .search-box {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 1rem;
    }

    #searchInput {
        width: 300px; /* Tăng chiều rộng của thanh tìm kiếm */
        max-width: 100%; /* Đảm bảo không vượt quá kích thước container */
        border-radius: 8px; /* Làm tròn góc */
        border: 1px solid #ccc; /* Thêm viền nhẹ */
        padding: 10px;
        font-size: 14px;
    }

    .color-preview {
        width: 24px;
        height: 24px;
        border-radius: 50%;
    }

    .btn-outline-secondary {
        border: 1px solid #ccc;
        color: #555;
    }

        .btn-outline-secondary:hover {
            background-color: #f8f9fa;
        }

    .table {
        border-collapse: collapse;
        border: none; /* Loại bỏ viền bảng */
    }

        .table td, .table th {
            border: none; /* Loại bỏ viền ô */
            border-bottom: 1px solid #ddd; /* Chỉ giữ viền dưới */
            text-align: center;
        }

    .btn-danger {
        color: #fff;
    }

        .btn-danger:hover {
            background-color: #e74c3c;
        }

</style>
<section class="section-banner">
    <img src="main/assets/images/banner-category.jpg"
         class="w-100 h-100" alt="banner-image-3">
    <div class="title-banner">
        <h1>
            DANH SÁCH ĐƠN HÀNG
        </h1>
    </div>
</section>
<div class="page-wrapper">
  
    <!-- Page body -->
    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards">

                <!-- Input tìm kiếm -->
                <div class="form-group d-flex justify-content-end">
                    <div class="search-box">
                        <input type="text" id="searchInput"
                               class="form-control"
                               @bind="searchText"
                               @oninput="SearchOrders"
                               placeholder="Nhập Id đơn hàng" />
                    </div>
                </div>

                <div class="col-12">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table  card-table  table-vcenter text-nowrap datatable">
                                <thead>
                                    <tr>
                                        <th>ID đơn hàng</th>
                                        <th>Tên khách hàng</th>
                                        <th>Số điện thoại</th>
                                        <th>Tổng tiền</th>
                                        <th>Ngày đặt hàng</th>
                                        <th>Trạng thái</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (pagedOrders != null && pagedOrders.Any())
                                    {
                                        int index = 0;
                                        @foreach (var item in pagedOrders)
                                        {
                                            <tr>
                                                <td>@item.Id</td>
                                                <td>
                                                    @if (item.Users == null)
                                                    {
                                                        <span class="customer-badge">Khách lẻ</span>
                                                    }
                                                    else
                                                    {
                                                        @item.Users.Name
                                                    }
                                                </td>
                                                <td>
                                                    @if (item.Users == null)
                                                    {
                                                        <span class="customer-badge">N/A</span>
                                                    }
                                                    else
                                                    {
                                                        @item.Users.Phone
                                                    }
                                                </td>

                                                <td>
                                                    @string.Format("{0:N0}", (item.Totalmoney)).Replace(".", ",") VNĐ
                                                </td>
                                                <td>@item.Created_at</td>
                                                <td>
                                                    <span class="@GetStatusClass(item.Status)">
                                                        @item.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToOrderTracking(item.Id)">Chi tiết</button>
                                                </td>
                                            </tr>
                                        }
                                    }

                                </tbody>
                            </table>
                            <div class="mt-4">
                                <Pagination TItem="Orders" PageNumber="currentPage" TotalPages="totalPages" PageSize="pageSize" TotalItems="lst_Orders.Count" OnPageChanged="GoToPage" OnPageSizeChanged="OnPageSizeChanged" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Orders> lst_Orders = new List<Orders>();
    private List<Orders> pagedOrders = new List<Orders>();
    private List<Order_details> lst_OrderDetails = new List<Order_details>();

    private List<Orders> Orders = new();

    private IEnumerable<Orders> paged_Orders;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalOrders = 0; // tổng hóa đơn
    private int pendingOrders = 0; // chờ xác nhận
    private int confirmedOrders = 0; // đã xác nhận
    private int preparedOrders = 0; // chuẩn bị hàng
    private int pickedOrders = 0; // đã lấy hàng
    private int shippingOrders = 0; // đang giao
    private int failedOrders = 0; // giao thất bại
    private int successfulOrders = 0; // giao thành công
    private int canceledOrders = 0; // bị hủy

    private DateTime? startDate;
    private DateTime? endDate;

    private long? ParsedUserId;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetUserIdFromSession();

            // Nếu không bị chuyển hướng, tiếp tục tải danh sách đơn hàng
            if (ParsedUserId != null)
            {
                await LoadOrders();
                await ListOrder();
                LoadPagedOrders();
                StateHasChanged(); // Cập nhật giao diện
            }
        }
    }

    private async Task GetUserIdFromSession()
    {
        var userJsonString = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");

        if (!string.IsNullOrEmpty(userJsonString))
        {
            try
            {
                // Parse JSON để lấy giá trị id và roles
                var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJsonString);

                if (userData != null)
                {
                    // Lấy UserId
                    if (userData.ContainsKey("Id") && long.TryParse(userData["Id"]?.ToString(), out long result))
                    {
                        ParsedUserId = result;
                    }
                    else
                    {
                        ParsedUserId = null;
                    }


                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error parsing User JSON: {ex.Message}");
                ParsedUserId = null;
            }
        }
        else
        {
            ParsedUserId = null;
        }
    }

    private void LoadPagedOrders()
    {
        totalPages = (int)Math.Ceiling((double)lst_Orders.Count / pageSize);
        pagedOrders = lst_Orders.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        LoadPagedOrders();
    }

    private async Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1;
        LoadPagedOrders();
    }

    private string GetStatusClass(string status) // giao diện cho status
    {
        if (status == "Hóa đơn treo")
        {
            return "badge bg-danger";
        }
        else if (status == "Đã thanh toán")
        {
            return "badge bg-success";
        }
        return "badge bg-secondary";
    }


    private async Task LoadOrders()
    {
        Orders = await OrderTrackingService.GetAllOrders();
    }

    private void GoToOrderTracking(long orderId)
    {
        nav.NavigateTo($"/ordertracking/{orderId}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (ParsedUserId != null)
        {
            await LoadOrders();
            await ListOrder();
            LoadPagedOrders();
        }
    }

    public async Task ListOrder()
    {
        // Lấy UserId từ Session
        await GetUserIdFromSession();

        if (ParsedUserId == null)
        {
            lst_Orders = new List<Orders>(); // Không có UserId thì danh sách hóa đơn trống
            return;
        }

        // Lấy danh sách đơn hàng từ service
        var orders = await orderService.GetAll();

        // Lọc đơn hàng theo UserId
        lst_Orders = orders
            .Where(o => o.User_id == ParsedUserId)
            .OrderByDescending(o => o.Status == "Hóa đơn treo")
            .ThenByDescending(o => o.Status == "Đã thanh toán")
            .ThenByDescending(o => o.Created_at)
            .ToList();

        // Cập nhật các thống kê
        totalOrders = lst_Orders.Count;
        pendingOrders = lst_Orders.Count(o => o.Status == "Chờ xác nhận");
        confirmedOrders = lst_Orders.Count(o => o.Status == "Đã xác nhận");
        preparedOrders = lst_Orders.Count(o => o.Status == "Đã chuẩn bị hàng");
        pickedOrders = lst_Orders.Count(o => o.Status == "Đã lấy hàng");
        shippingOrders = lst_Orders.Count(o => o.Status == "Đang vận chuyển");
        failedOrders = lst_Orders.Count(o => o.Status == "Giao thất bại");
        successfulOrders = lst_Orders.Count(o => o.Status == "Giao thành công");
        canceledOrders = lst_Orders.Count(o => o.Status == "Đã hủy");

        LoadPagedOrders();
    }

    private async Task SearchOrders(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;

        lst_Orders = await orderService.GetAll() ?? new List<Orders>();

        if (string.IsNullOrEmpty(searchText))
        {
            await ListOrder();
        }
        else if (int.TryParse(searchText, out int searchId))
        {
            lst_Orders = lst_Orders
                .Where(o => o.Id == searchId)
                .ToList();
        }

        currentPage = 1;
        LoadPagedOrders();
        StateHasChanged();
    }



}

