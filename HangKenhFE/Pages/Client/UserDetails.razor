@page "/user/UserDetails/{userId:long}"
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AddressService address_Service
@inject IJSRuntime JSRuntime


<style>
    .otp-reminder-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2000;
    }

    .otp-reminder-modal-content {
        background-color: #fff;
        padding: 20px 30px;
        border-radius: 8px;
        width: 600px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        animation: fadeInModal 0.3s ease-out;
    }

    .otp-reminder-modal-content h3 {
        font-size: 24px;
        margin-bottom: 15px;
    }

    .otp-reminder-modal-content p {
        font-size: 16px;
        line-height: 1.5;
        margin-bottom: 15px;
    }

    .otp-reminder-modal-content a {
        text-decoration: underline;
        color: #007bff;
        font-weight: bold;
    }

    .otp-reminder-modal-content a:hover {
        color: #0056b3;
    }

</style>
<h3 class="text-center">Chi tiết Người dùng</h3>

@if (user == null)
{
    <p class="text-center">Đang tải thông tin người dùng...</p>
}
else
{
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card shadow-lg" style="width: 50%; border-radius: 10px;">
            <div class="card-body">
                <EditForm Model="@user" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="Name">Tên</label>
                        <InputText id="Name" class="form-control" @bind-Value="user.Name" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="Phone">Số điện thoại</label>
                        <InputText id="Phone" class="form-control" @bind-Value="user.Phone" Disabled="@(user.OTPCheck || otpSent)" />
                        @if (!user.OTPCheck)
                        {
                            <button type="button" class="btn btn-secondary mt-2" @onclick="SendOtp" Disabled="@otpSent">
                                Gửi OTP
                            </button>
                        }

                        @if (!user.OTPCheck)
                        {
                            <div class="form-group mt-2">
                                <label for="OTP">Nhập OTP</label>
                                <InputText id="OTP" class="form-control" @bind-Value="otpInput" />
                                <button type="button" class="btn btn-success mt-2" @onclick="VerifyOtp">
                                    Xác nhận OTP
                                </button>
                            </div>
                        }
                    </div>

                    @if (otpError != null)
                    {
                        <p class="text-danger">@otpError</p>
                    }

                    <div class="form-group mb-3">
                        <label for="Email">Email</label>
                        <InputText id="Email" class="form-control" @bind-Value="user.Email" />
                    </div>


                    <div class="d-flex justify-content-between mt-4">
                        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(message))
                {
                    <p class="text-success text-center mt-3">@message</p>
                }


            </div>

            @if (showOtpReminderModal)
            {
                <div class="otp-reminder-modal">
                    <div class="otp-reminder-modal-content">
                        <h3 class="text-danger text-center">Thông báo quan trọng</h3>
                        <p>Xin chào mừng bạn khi đã tới với Web của chúng tôi. Để hoàn thành nốt thủ tục, chúng tôi muốn nhắc nhở bạn những nội dung <strong>quan trọng</strong> sau:</p>
                        <p>Chúng tôi có chức năng <strong class="text-primary">đồng bộ thông tin qua số điện thoại</strong>. Điều này sẽ giúp bạn có thông tin về Hóa đơn bạn <strong>Đã thanh toán</strong> tại quầy ở cửa hàng của chúng tôi. Vui lòng nhập số điện thoại <strong class="text-primary">đã đăng ký tại quầy (nếu có)</strong>.</p>
                        Còn nếu bạn chưa từng mua sắn tại của hàng của chúng tôi thì bạn chỉ cần xác thực <strong>OTP</strong> bình thường.
                        <hr />
                        <p>
                            <span class="text-danger">Lưu ý:</span> Số điện thoại chỉ được xác thực <strong>1 lần duy nhất</strong> và <strong class="text-primary">không thể hoàn tác</strong>. Số điện thoại phải là số thực. Điều này sẽ đảm bảo quyền lợi của bạn khi mua sắm tại cửa hàng của chúng tôi. <br /> Bạn có thắc mắc gì vui lòng <a href="/faq" target="_blank" class="text-info">nhấn vào đây</a>.
                        </p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" @onclick="CloseOtpReminderModal">Đã hiểu</button>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
}

@code {
    [Parameter]
    public long userId { get; set; }

    private Users user;
    private string message;

    // OTP handling
    private string otpInput;
    private string generatedOtp;
    private bool otpSent = false;
    private DateTime? otpExpiryTime;
    private string otpError;

    private bool showOtpReminderModal = false;
    private async Task<bool> ShowConfirmation(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }

    private async Task ShowToast(string type, string message)
    {
        switch (type)
        {
            case "success":
                await JSRuntime.InvokeVoidAsync("toastr.success", message);
                break;
            case "error":
                await JSRuntime.InvokeVoidAsync("toastr.error", message);
                break;
            case "warning":
                await JSRuntime.InvokeVoidAsync("toastr.warning", message);
                break;
            case "info":
                await JSRuntime.InvokeVoidAsync("toastr.info", message);
                break;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserService.GetById(userId);
            if (user == null)
            {
                await ShowToast("error", "Người dùng không tồn tại.");
                Navigation.NavigateTo("/admin/users");
                return;
            }

            // Hiển thị Modal nếu OTPCheck == false
            if (!user.OTPCheck)
            {
                showOtpReminderModal = true;
            }
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Lỗi: {ex.Message}");
        }
    }

    private void CloseOtpReminderModal()
    {
        showOtpReminderModal = false; // Đóng Modal
    }

    private async Task SendOtp()
    {
        if (string.IsNullOrEmpty(user.Phone))
        {
            otpError = "Số điện thoại không được để trống.";
            return;
        }

        // Tạo OTP giả lập
        generatedOtp = new Random().Next(100000, 999999).ToString();
        otpSent = true;
        otpExpiryTime = DateTime.Now.AddMinutes(5); 

        otpError = null;
        message = $"OTP của bạn là: {generatedOtp} (Giả lập, chỉ dành cho thử nghiệm)";
    }

    private async Task VerifyOtp()
    {
        if (generatedOtp == null)
        {
            await ShowToast("error", "Không tìm thấy OTP. Vui lòng gửi lại.");
            return;
        }

        if (otpExpiryTime == null || otpExpiryTime <= DateTime.Now)
        {
            await ShowToast("error", "OTP đã hết hạn. Vui lòng gửi lại.");
            return;
        }

        if (otpInput != generatedOtp)
        {
            await ShowToast("error", "OTP không chính xác.");
            return;
        }

        otpSent = false;

        var allUsers = await UserService.GetAll();
        var existingUser = allUsers.FirstOrDefault(u => u.Phone == user.Phone);

        if (existingUser != null)
        {
            existingUser.Name = user.Name;
            existingUser.Phone = user.Phone;
            existingUser.Email = user.Email;
            existingUser.Password = user.Password;
            existingUser.OTPCheck = true;
            existingUser.Address = user.Address;
            existingUser.Updated_at = DateTime.Now;

            await UserService.Update(existingUser);
            await UserService.Delete(user.Id);
            user = existingUser;

            await ShowToast("success", "Cập nhật thông tin thành công! Số điện thoại đã được liên kết.");
        }
        else
        {
            user.OTPCheck = true;
            await UserService.Update(user);
            await ShowToast("success", "Cập nhật thông tin thành công!");
        }
    }


    private async Task HandleSubmit()
    {
        if (otpSent)
        {
            await ShowToast("warning", "Vui lòng xác nhận OTP trước khi lưu thông tin.");
            return;
        }
        try
        {
            var allUsers = await UserService.GetAll();
            var emailExists = allUsers.Any(u => u.Email == user.Email && u.Id != user.Id);

            if (emailExists)
            {
                await ShowToast("error", "Email đã tồn tại. Vui lòng nhập email khác.");
                return;
            }

            user.Address = null;
            await UserService.Update(user);

            await ShowToast("success", "Lưu thay đổi thành công!");
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Lỗi khi cập nhật thông tin: {ex.Message}");
        }
    }
}
