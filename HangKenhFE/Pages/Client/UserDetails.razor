@page "/user/UserDetails/{userId:long}"
@inject IUserService UserService
@inject NavigationManager Navigation
@inject AddressService address_Service

<h3>Chi tiết Người dùng</h3>

@if (user == null)
{
    <p>Đang tải thông tin người dùng...</p>
}
else
{
    <EditForm Model="@user" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Tên</label>
            <InputText id="Name" class="form-control" @bind-Value="user.Name" Disabled="@user.OTPCheck" />
        </div>

        <div class="form-group">
            <label for="Phone">Số điện thoại</label>
            <InputText id="Phone" class="form-control" @bind-Value="user.Phone" Disabled="@(user.OTPCheck || otpSent)" />
            @if (!user.OTPCheck)
            {
                <button type="button" class="btn btn-secondary mt-2" @onclick="SendOtp" Disabled="@otpSent">
                    Gửi OTP
                </button>
            }
            @if (otpSent)
            {
                <div class="form-group mt-2">
                    <label for="OTP">Nhập OTP</label>
                    <InputText id="OTP" class="form-control" @bind-Value="otpInput" />
                    <button type="button" class="btn btn-success mt-2" @onclick="VerifyOtp">
                        Xác nhận OTP
                    </button>
                </div>
            }
        </div>

        @if (otpError != null)
        {
            <p class="text-danger">@otpError</p>
        }


        <div class="form-group">
            <label for="Email">Email</label>
            <InputText id="Email" class="form-control" @bind-Value="user.Email" Disabled="true" />
        </div>
        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <p class="text-success">@message</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
}

@code {
    [Parameter]
    public long userId { get; set; }

    private Users user;
    private string message = string.Empty;
    private string errorMessage = string.Empty;

    // OTP handling
    private string otpInput;
    private string generatedOtp;
    private bool otpSent = false;
    private DateTime? otpExpiryTime;
    private string otpError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserService.GetById(userId);
            if (user == null)
            {
                errorMessage = "Người dùng không tồn tại.";
                Navigation.NavigateTo("/");
            }


        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
        }
    }


    protected override void OnInitialized()
    {
        generatedOtp = null;
        otpExpiryTime = null;
        otpSent = false;
    }

    private async Task SendOtp()
    {
        if (string.IsNullOrEmpty(user.Phone))
        {
            otpError = "Số điện thoại không được để trống.";
            return;
        }

        // Tạo OTP giả lập
        generatedOtp = new Random().Next(100000, 999999).ToString();
        otpSent = true;
        otpExpiryTime = DateTime.Now.AddMinutes(5); // OTP hết hạn sau 5 phút

        otpError = null;
        message = $"OTP của bạn là: {generatedOtp} (Giả lập, chỉ dành cho thử nghiệm)";
        StateHasChanged();

        await Task.Delay(500);
    }

    private async Task VerifyOtp()
    {
        if (generatedOtp == null)
        {
            otpError = "Không tìm thấy OTP. Vui lòng gửi lại.";
            return;
        }

        if (otpExpiryTime == null || otpExpiryTime <= DateTime.Now)
        {
            otpError = "OTP đã hết hạn. Vui lòng gửi lại.";
            return;
        }

        if (otpInput != generatedOtp)
        {
            otpError = "OTP không chính xác.";
            return;
        }

        otpError = null;
        otpSent = false;

        var allUsers = await UserService.GetAll();
        var existingUser = allUsers.FirstOrDefault(u => u.Phone == user.Phone);

        if (existingUser != null)
        {
            // Cập nhật thông tin từ bản ghi hiện tại vào bản ghi tìm thấy
            existingUser.Name = user.Name;
            existingUser.Phone = user.Phone;
            existingUser.Email = user.Email;
            existingUser.Password = user.Password;
            existingUser.OTPCheck = true;
            existingUser.Address = user.Address;
            existingUser.Updated_at = DateTime.Now;

            await UserService.Update(existingUser);

            // Xóa bản ghi hiện tại sau khi cập nhật bản ghi tìm thấy
            await UserService.Delete(user.Id);
            user = existingUser;

            message = "Cập nhật thông tin thành công! Số điện thoại đã được liên kết.";
        }
        else
        {
            await UserService.Update(user);
            message = "Cập nhật thông tin thành công!";
        }

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {

        try
        {
            if (otpSent == true)
            {
                otpError = "Vui lòng xác nhận OTP trước khi lưu thông tin.";
                return;
            }
            else
            {
                await UserService.Update(user);
                message = "Lưu thay đổi thành công!";
                Navigation.NavigateTo("/");
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi cập nhật thông tin: {ex.Message}";
        }
    }
}
