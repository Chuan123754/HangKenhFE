@page "/ordertracking/{OrderId:long}"
@using HangKenhFE.Models.DTO
@inject IProductAttributeServies productAttributeService
@inject IOrderIServices orderService
@inject OrderDetailsIServices orderDetailService
@inject IOrderTrackingServices orderTrackingService
@inject IAddressServices addressService
@inject IAccountService accountService
@inject IUserService userService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IJSRuntime JS

<style>
    .card-header {
        font-weight: bold;
        background-color: #f8f9fa;
    }

    .table th, .table td {
        vertical-align: middle;
    }

</style>
<div class="container">
    @if (OrderTracking != null)
    {
        <!-- Lịch sử đơn hàng -->
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center bg-light">
                <h5 class="card-title mb-0">Lịch sử đơn hàng</h5>
                @if (Order.Status == "Chờ xác nhận" || Order.Status == "Đã xác nhận" || Order.Status == "Đã thanh toán" || Order.Status == "Đã chuẩn bị hàng")
                {
                    <button class="btn btn-danger mb-0" @onclick="OpenModalCacelOrder">Hủy đơn</button>
                }
                else if (Order.Status == "Đơn hủy")
                {
                    <span style="color : red"> Đã hủy đơn</span>
                }
                else
                {
                    <span> Đơn hàng sẽ không thể hủy khi đơn vị giao hàng đã lấy hàng</span>
                }
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Số tiền</th>
                            <th scope="col">Thời gian</th>
                            <th scope="col">Loại giao dịch</th>
                            <th scope="col">Phương thức thanh toán</th>
                            <th scope="col">Trạng thái</th>
                            <th scope="col">Ghi chú</th>
                            <th scope="col">Nhân viên xác nhận</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tracking in OrderTracking.OrderTrackings.OrderByDescending(t => t.CreatedAt))
                        {
                            <tr>
                                <td>@OrderTracking.TotalMoney.ToString("N0") VND</td>
                                <td>@tracking.CreatedAt?.ToString("dd-MM-yyyy HH:mm:ss")</td>
                                <td>@OrderTracking.Note</td>
                                <td>@OrderTracking.TypePayment</td>
                                <td><span class="@GetStatusClass(tracking.Status)">@tracking.Status</span></td>
                                <td>@tracking.Note</td>
                                 <td>
                                    @if (@tracking.CreateBy != null)
                                    {
                                        @tracking.CreateBy
                                    }
                                    else
                                    {
                                        <span> Hệ thống</span>
                                    }                         
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Danh sách sản phẩm -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">Danh sách sản phẩm</h5>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Hình ảnh</th>
                            <th scope="col">Tên sản phẩm</th>
                            <th scope="col">Màu sắc</th>
                            <th scope="col">Size</th>
                            <th scope="col">Số lượng</th>
                            <th scope="col">Đơn giá</th>
                            <th scope="col">Gía chiết khấu</th>
                            <th scope="col">Tổng tiền</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in OrderTracking.Products)
                        {
                            <tr>
                                <td><img src="@product.Image" alt="Hình ảnh" style="width: 80px; height: auto;" /></td>
                                <td>@product.SKU </td>
                                <td>@product.Color</td>
                                <td>@product.Size</td>
                                <td>@product.Quantity</td>
                                <td>
                                    @if (product.UnitPrice.HasValue && product.UnitPrice.Value > 0)
                                    {
                                        <span>
                                            @string.Format("{0:N0}", product.UnitPrice.Value).Replace(".", ",") VNĐ
                                        </span>
                                    }
                                    else
                                    {
                                        <span>#N/A</span>
                                    }
                                </td>
                                <td>
                                    @if (product.TotalDiscount > 0)
                                    {
                                        <span style=" color: red;">
                                            @string.Format("{0:N0}", product.TotalDiscount).Replace(".", ",") VNĐ
                                        </span>
                                    }
                                    else
                                    {
                                        <span> Không</span>
                                    }
                                </td>

                                <td>
                                    @if (product.TotalDiscount.HasValue && product.TotalDiscount.Value > 0)
                                    {
                                        <span style="text-decoration: line-through; color: gray;">
                                            @string.Format("{0:N0}", product.Quantity * product.UnitPrice.Value).Replace(".", ",") VNĐ
                                        </span>
                                        <div>
                                            <span style="font-weight: bold; color: red;">
                                                @string.Format("{0:N0}", product.Quantity * (product.TotalDiscount > 0 ? product.TotalDiscount : product.UnitPrice.Value)).Replace(".", ",") VNĐ
                                            </span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span>
                                            @string.Format("{0:N0}", (product.Quantity * (product.TotalDiscount > 0 ? product.TotalDiscount : product.UnitPrice ?? 0))).Replace(".", ",") VNĐ
                                        </span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">Thông tin tổng tiền</h5>
            </div>
            <div class="card-body d-flex justify-content-between">
                <div class="invoice-info" style="flex: 1; padding-right: 20px;">
                    <h4>Thông Tin Hóa Đơn</h4>
                    <p><strong>Tổng tiền hàng:</strong> @OrderTracking.TotalPrincipal.ToString("N0") VND</p>
                    <p style="color: red;"><strong>Tổng tiền chiết khấu :</strong> - @OrderTracking.TotalDiscount.ToString("N0") VND</p>
                    <p><strong>Phí giao hàng: </strong> @OrderTracking.FeeShipping.ToString("N0") VND</p>
                    <p><strong>Tổng tiền hàng đã giảm: </strong> @OrderTracking.TotalAmount.ToString("N0") VND</p>
                    <p style="color: green;"><strong>Tổng tiền cần thanh toán: </strong> @OrderTracking.TotalMoney.ToString("N0") VND</p>
                </div>
                <div class="customer-info" style="flex: 1; padding-left: 20px;">
                    <div class="header-container" style="display: flex; justify-content: space-between; align-items: center;">
                        <h4 style="margin: 0;">Thông Tin Khách Hàng</h4>
                        @if(Order.Address_Id != null )
                        {
                            @if (Order.Status == "Chờ xác nhận" || Order.Status == "Đã xác nhận" || Order.Status == "Đã thanh toán" || Order.Status == "Đã chuẩn bị hàng")
                            {
                                <button class="btn btn-warning" @onclick="OpenModalUpdateAddress">Thay đổi địa chỉ nhận hàng</button>
                            }
                            else if (Order.Status == "Đơn hủy")
                            {
                                <span style="color : red"> Đã hủy đơn</span>
                            }
                            else
                            {
                                <span> Đơn hàng đang trên đường giao tới bạn</span>
                            }
                        }
                        else
                        {
                            <span> Đơn hàng được bán tại cửa hàng</span>
                        }

                    </div>
                    @if (Order.Users != null)
                    {
                        <p><strong>Tên khách hàng: </strong>@Order.Users.Name</p>
                        <p><strong>Số điện thoại: </strong> @Order.Users.Phone</p>
                        <p><strong>E-mail: </strong> @Order.Users.Email</p>

                        @if (Address != null)
                        {
                            <p><strong>Tên Người nhận hàng: </strong>@Address.Name </p>
                            <p><strong>Địa chỉ nhận hàng : </strong>  @Address.Street -  @Address.Ward_commune - @Address.District - @Address.Province_city </p>
                            <p><strong>Số điện thoại người nhận: </strong>@Address.Phone</p>
                        }
                    }
                    else
                    {
                        <p><strong>Tên khách hàng: </strong>Khách lẻ</p>
                        <p><strong>Số điện thoại: </strong> #N/A</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Đang tải thông tin...</p>
    }
    @if (modalCacelOrder)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 40%; width: auto;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Nhập lý do hủy đơn</h5>
                        <button type="button" class="btn-close" @onclick="CloseModalCacelOrder" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="reasonCancel" class="form-label">Lý do hủy</label>
                            <input type="text" class="form-control" id="reasonCancel" @bind="reasonCancel" placeholder="Nhập lý do hủy đơn">
                        </div>
                    </div>
                    <div class="modal-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ConfirmCancel">Xác nhận</button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseModalCacelOrder">Hủy</button>
                    </div>
                </div>
            </div>
        </div>

    }
    @if(modalUpdateAddress)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 40%; width: auto;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Cập nhật địa chỉ nhận hàng</h5>
                    </div>
                    <form class="p-4 bg-light rounded shadow">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">Tên người nhận </label>
                                <input type="text" @bind="Address.Name" class="form-control" placeholder="Nhập tên người nhận">
                            </div>
                            <div class="col-md-6">
                                <label for="name" class="form-label">SĐT </label>
                                <input type="text" @bind="Address.Phone" class="form-control" placeholder="Nhập SĐT">
                            </div>

                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="city" class="form-label">Tỉnh/Thành phố</label>
                                <select id="city" @onchange="OnProvinceChange" class="form-select">
                                    <option value="">Chọn Tỉnh</option>
                                    @if (provinces != null && provinces.Count > 0)
                                    {
                                        @foreach (var province in provinces)
                                        {
                                            <option value="@province.Id">@province.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="district" class="form-label">Quận/Huyện</label>
                                <select id="district" @onchange="OnDistrictChange" class="form-select" disabled="@(!hasDistricts)">
                                    <option value="">Chọn Huyện</option>
                                    @if (districts != null && districts.Count > 0)
                                    {
                                        @foreach (var district in districts)
                                        {
                                            <option value="@district.Id">@district.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="ward" class="form-label">Xã/Phường/Thị trấn</label>
                                <select id="ward" @onchange="OnWardChange" class="form-select" disabled="@(!hasWards)">
                                    <option value="">Chọn Xã</option>
                                    @if (wards != null && wards.Count > 0)
                                    {
                                        @foreach (var ward in wards)
                                        {
                                            <option value="@ward.Id">@ward.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label for="address" class="form-label">Địa chỉ cụ thể</label>
                                <input type="text" @bind="Address.Street" class="form-control" placeholder="Nhập địa chỉ cụ thể">
                            </div>
                            <div class="col-md-4">
                                <label for="note" class="form-label">Ghi chú</label>
                                <input type="text" @bind="Address.Status" id="note" class="form-control" placeholder="Nhập ghi chú">
                            </div>
                        </div>

                        <div class="modal-footer d-flex justify-content-between">
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ConfirmUpdateAddress">Xác nhận</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CloseModalUpdateAddress">Hủy</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public long OrderId { get; set; }
    private OrderTrackingDTO? OrderTracking { get; set; }
    private Orders? Order { get; set; }
    private Orders? OrderAddress { get; set; }
    private Address Address = new Address();
    private Account admin = new Account();
    private long selectedTrackingId;
    private bool modalCacelOrder = false;
    private string reasonCancel;
    private order_trackings order_Trackings = new order_trackings();
    private bool modalUpdateAddress = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {                     
            Order = await orderService.GetByIdOrders(OrderId);
            OrderTracking = await orderTrackingService.GetBy(OrderId);
            OrderAddress = await orderService.OrdersAddress(OrderId);
            Address = await addressService.GetAddressById(Order.Address_Id ?? 0);
            provinces = await address_Service.GetProvincesAsync();

            if (OrderTracking != null && OrderTracking.OrderTrackings.Any())
            {
                // Sắp xếp theo Created_at giảm dần và lấy bản ghi mới nhất
                var latestTracking = OrderTracking.OrderTrackings
                    .OrderByDescending(t => t.CreatedAt)
                    .FirstOrDefault();

                OrderTracking.Status = latestTracking?.Status;
                selectedTrackingId = latestTracking?.Id ?? 0; // Lấy ID của bản ghi mới nhất
            }
            else
            {
                OrderTracking.Status = null;
                selectedTrackingId = 0;
            }
            Address = await addressService.GetAddressById(Order.Address_Id ?? 0);
            else
            {
                admin = null;
            }
     
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi tải thông tin vận chuyển: {ex.Message}");
        }
    }

    private async Task ReloadTrackingData()
    {
        Order = await orderService.GetByIdOrders(OrderId);
        OrderTracking = await orderTrackingService.GetBy(OrderId);

        if (OrderTracking != null && OrderTracking.OrderTrackings.Any())
        {
            // Lấy trạng thái mới nhất theo CreatedAt
            OrderTracking.Status = OrderTracking.OrderTrackings
                .OrderByDescending(t => t.CreatedAt) // giảm dần
                .FirstOrDefault()?.Status;
        }
        else
        {
            OrderTracking.Status = null;
        }

        StateHasChanged();
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Chờ xác nhận" => "badge bg-warning",
            "Đã xác nhận" => "badge bg-primary",
            "Đã thanh toán" => "badge bg-primary",
            "Đã chuẩn bị hàng" => "badge bg-info",
            "Đã lấy hàng" => "badge bg-info",
            "Đang vận chuyển" => "badge bg-info",
            "Giao thành công" => "badge bg-success",
            "Giao thất bại" => "badge bg-danger",
            "Giao dịch thất bại" => "badge bg-danger",
            "Hoàn tất đơn" => "badge bg-success",
            "Đã hoàn thành" => "badge bg-success",
            "Đơn hủy" => "badge bg-dark",
            "Tại quầy" => "badge bg-success",
            _ => "badge bg-light"
        };
    }

    private async void OpenModalCacelOrder()
    {
        if (Order.Status == "Đơn hủy")
        {
            await JS.InvokeVoidAsync("toastr.error", "Đơn hàng đã được hủy trước đó !");
            return;
        }
        else if (Order.Status == "Đã lấy hàng" || Order.Status == "Đang vận chuyển" || Order.Status == "Giao thất bại" || Order.Status == "Giao thành công")
        {
            await JS.InvokeVoidAsync("toastr.error", "Bạn không thể hủy đơn hàng vào lúc này !");
            return;
        }
        else
        {
            modalCacelOrder = true;
        }

    }

    private async void CloseModalCacelOrder()
    {
        modalCacelOrder = false;
        reasonCancel = string.Empty;
    }

    private async Task ConfirmCancel()
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận hủy đơn hàng?");
            if (confirmed)
            {
                if (OrderId == 0)
                {
                    await JS.InvokeVoidAsync("toastr.error", "OrderId không hợp lệ.");
                    return;
                }
                else
                {
                    Console.WriteLine($"OrderId: {OrderId}");
                }
                var lst_orderDetail = await orderDetailService.GetOrderDetailsByOrderId(OrderId);
                if (lst_orderDetail == null || !lst_orderDetail.Any())
                {
                    await JS.InvokeVoidAsync("toastr.error", "Không tìm thấy chi tiết đơn hàng");
                    return;
                }

                Order.Status = "Đơn hủy";
                await orderService.Update(Order, OrderId);
                foreach(var orderDetail in lst_orderDetail)
                {
                    var productAttribute = await productAttributeService.GetProductAttributesById(orderDetail.Product_Attribute_Id);
                    if(productAttribute != null)
                    {
                        productAttribute.Stock += orderDetail.Quantity;
                        await productAttributeService.Update(productAttribute, orderDetail.Product_Attribute_Id);
                    }
                }
                var newTracking = new order_trackings
                    {
                        OrderId = OrderId,
                        Status = "Đơn hủy",
                        Note = $"Khách hủy đơn với lý do : {reasonCancel}",
                        Created_at = DateTime.Now
                    };
                await orderTrackingService.AddOrderTracking(newTracking);
                await JS.InvokeVoidAsync("toastr.success", "Hủy đơn hàng thành công");
                modalCacelOrder = false;
                await ReloadTrackingData();
                StateHasChanged();
            }
        }
        catch
        {
            await JS.InvokeVoidAsync("toastr.error", "Không thể hủy đơn, vui lòng thử lại sau");
            return;
        }
    }

    private Address TempAddress;

    private async void OpenModalUpdateAddress()
    {
        Address = await addressService.GetAddressById(Order.Address_Id ?? 0);
        TempAddress = new Address // Tạo bản sao 
            {
                Province_city = Address.Province_city,
                District = Address.District,
                Ward_commune = Address.Ward_commune
            };
        modalUpdateAddress = true;
        StateHasChanged();
    }

    private async void CloseModalUpdateAddress()
    {
        modalUpdateAddress = false;
        StateHasChanged();
    }

    private async Task ConfirmUpdateAddress()
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Xác nhận thay đổi địa chỉ nhận hàng?");
            if (confirmed)
            {
                var province = provinces.FirstOrDefault(p => p.Id == TempAddress.Province_city);
                var district = districts.FirstOrDefault(d => d.Id == TempAddress.District);
                var ward = wards.FirstOrDefault(w => w.Id == TempAddress.Ward_commune);
                Address.Province_city = province.Name;
                Address.District = district?.Name;
                Address.Ward_commune = ward?.Name;

                Address.Street = Address.Street;
                Address.Phone = Address.Phone;
                Address.Name = Address.Name;

                modalUpdateAddress = false;

                await addressService.UpdateAddress(Address, Address.Id);
                await JS.InvokeVoidAsync("toastr.success", "Cập nhật địa chỉ nhận hàng thành công");
                StateHasChanged();
            }
        }
        catch
        {
            await JS.InvokeVoidAsync("toastr.error", "Cập nhật địa chỉ thất bại. Vui lòng thử lại sau");
            return;
        }
    }

    private List<Province> provinces = new List<Province>();
    private List<Districted> districts = new List<Districted>();
    private List<Ward> wards = new List<Ward>();
    private bool hasDistricts = false;
    private bool hasWards = false;
    [Inject] private AddressService address_Service { get; set; }
    private async Task OnProvinceChange(ChangeEventArgs e)
    {
        var selectedProvinceId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedProvinceId))
        {
            TempAddress.Province_city = selectedProvinceId; 
            districts = await address_Service.GetDistrictsAsync(int.Parse(selectedProvinceId));
            hasDistricts = districts.Count > 0;
            wards.Clear();
            hasWards = false;
        }
    }
    private async Task OnDistrictChange(ChangeEventArgs e)
    {
        var selectedDistrictId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedDistrictId))
        {
            TempAddress.District = selectedDistrictId; 
            wards = await address_Service.GetWardsAsync(int.Parse(selectedDistrictId));
            hasWards = wards.Count > 0;
        }
    }
    private async Task OnWardChange(ChangeEventArgs e)
    {
        var selectedWardId = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedWardId))
        {
            TempAddress.Ward_commune = selectedWardId;
        }
    }
    // Các biến để bind vào form
    private string city;
    private string district;
    private string ward;
    private string street;
    private string phone;
}
