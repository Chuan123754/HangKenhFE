@page "/wishlist"
@using BlazorBootstrap
@using System.Text.Json;
@inject IJSRuntime JS
@inject IUserService userServices
@inject IWishlistServices wishlistServices
@inject IProduct_wishlist_Services productvariantswishlist
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager nav

<section class="section-banner">
    <img src="main/assets/images/banner-category.jpg"
         class="w-100 h-100" alt="banner-image-3">
    <div class="title-banner">
        <h1>
            SẢN PHẨM YÊU THÍCH CỦA BẠN
        </h1>
    </div>
</section>
<section>
    <!-- Thông báo khi danh sách rỗng -->
    @if (user == null)
    {
        <div class="container mt-4">
            Đăng nhập để xem thông tin
        </div>
    }
    else if (product_WL_list.Count == 0)
    {
        <div class="container mt-4">
            Danh sách yêu thích trống
        </div>
    }
    else
    {
        <div class="container mt-4">
            <table class="table card-table table-vcenter text-nowrap">
                <thead>
                    <tr>
                        <th>Sản phẩm</th>
                        <th class="text-xl-center">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < product_WL_list.Count; i++)
                    {
                        var item = product_WL_list[i];
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img src="@item.Product_Posts.Feature_image"
                                         alt="@item.Product_Posts.Title"
                                         class="img-thumbnail"
                                         style="width: 100px; height: auto; margin-right: 15px;">
                                    <div>
                                        <h5 class="mb-1">@item.Product_Posts.Title</h5>
                                        @if (item.MinPrice.HasValue && item.MaxPrice.HasValue)
                                        {
                                            <p class="mb-1 text-muted">
                                                Giá: @string.Format("{0:N0}", item.MinPrice).Replace(".", ",") VNĐ -
                                                @string.Format("{0:N0}", item.MaxPrice).Replace(".", ",") VNĐ
                                            </p>
                                        }
                                        else
                                        {
                                            <div>Chưa có giá</div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td class="text-center align-middle">

                                <button class="btn btn-sm btn-outline-success me-2"
                                            @onclick="() => MuaNgay(item.Product_Posts_Id)">
                                        Mua ngay
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="() => DeleteFromWishlist(item.Id)">
                                        Xóa
                                    </button>
                            
                            
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</section>


@code {
    private Users user = new Users();
    private List<Product_wishlist> product_WL_list = new List<Product_wishlist>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeUser();
            await LoadWLP(); // Chỉ gọi LoadWLP sau khi user đã sẵn sàng
        }
    }
    private async Task InitializeUser()
    {
        var userJsonString = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");
        if (!string.IsNullOrEmpty(userJsonString))
        {
            try
            {
                var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJsonString);
                if (userData != null && userData.ContainsKey("Id") && long.TryParse(userData["Id"]?.ToString(), out long result))
                {
                    user = await userServices.GetById(result);
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error parsing User JSON: {ex.Message}");
                user = null;
            }
        }
        else
        {
            user = null;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadWLP();

    }
    private async Task LoadWLP()
    {
        var wishlistDetails = await productvariantswishlist.GetAllPW();
        var wishlit = await wishlistServices.GetAll();
        if (user != null)
        {
            var wishlistUser = wishlit.Where(c => c.User_id == user.Id).FirstOrDefault();
            if (wishlistUser == null)
            {
                return;
            }
            product_WL_list = wishlistDetails.Where(c => c.Wishlist_id == wishlistUser.Id).ToList();
        }
        else
        {
            await JS.InvokeVoidAsync("toastr.error", "Đăng nhập để xem thông tin.");
        }


    }

    private async Task DeleteFromWishlist(long id)
    {
        await productvariantswishlist.Delete(id);
        await LoadWLP();
    }
    private void MuaNgay(long id)
    {
        nav.NavigateTo($"/product-detail/{id}");
    }

}
