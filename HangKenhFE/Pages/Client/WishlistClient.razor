@page "/wishlist"
@using BlazorBootstrap
@using System.Text.Json;
@inject IJSRuntime JS
@inject IUserService userServices
@inject IWishlistServices wishlistServices
@inject IProduct_variants_wishlist_Services productvariantswishlist
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager nav

<section class="section-banner">
    <img src="main/assets/images/banner-category.jpg"
         class="w-100 h-100" alt="banner-image-3">
    <div class="title-banner">
        <h1>
            SẢN PHẨM YÊU THÍCH CỦA BẠN
        </h1>
    </div>
</section>
<section>

    <!-- Thông báo khi danh sách rỗng -->
    @if (product_WL_list.Count == 0)
    {
        <div class="container mt-4">Danh sách của bạn hiện đang trống!</div>
    }
    else
    {
        <div class="container mt-4">
            <div class="list-group">
                @for (int i = 0; i < product_WL_list.Count; i++)
                {
                    var item = product_WL_list[i];
                    <div class="list-group-item d-flex align-items-center justify-content-between border-0 @(i < product_WL_list.Count - 1 ? "border-bottom" : "")">
                        <div class="d-flex align-items-center">
                            <img src="@item.Product_Variants.Posts.Feature_image" alt="@item.Product_Variants.Posts.Title" class="img-thumbnail" style="width: 100px; height: auto; margin-right: 15px;">
                            <div>
                                <h5 class="mb-1">@item.Product_Variants.Posts.Title</h5>
                               
                                @if (item.Product_Variants.MinPrice.HasValue && item.Product_Variants.MaxPrice.HasValue)
                                {
                                    <p class="mb-1 text-muted">
                                        Giá:   @string.Format("{0:N0}", item.Product_Variants?.MinPrice).Replace(".", ",") VNĐ -   @string.Format("{0:N0}", item.Product_Variants?.MaxPrice).Replace(".", ",") VNĐ                                     
                                    </p>                                 
                                }
                                else
                                {
                                    <div>Chưa có giá</div>
                                }
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-success me-2" @onclick="() => MuaNgay(item.Product_variants_id)">Mua ngay</button>
                            <button class="btn btn-danger" @onclick="() => DeleteFromWishlist(item.Id)">Xóa</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</section>

@code {
    private Users user = new Users();
    private List<Product_variants_wishlist> product_WL_list = new List<Product_variants_wishlist>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userJsonString = await JS.InvokeAsync<string>("sessionStorage.getItem", "user");

            if (!string.IsNullOrEmpty(userJsonString))
            {
                try
                {
                    // Parse JSON để lấy giá trị id và roles
                    var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(userJsonString);

                    if (userData != null)
                    {
                        // Lấy UserId
                        if (userData.ContainsKey("Id") && long.TryParse(userData["Id"]?.ToString(), out long result))
                        {
                            user = await userServices.GetById(result);
                        }
                        else
                        {
                            user = null; // Nếu không tìm thấy hoặc parse không được, đặt user là null
                        }
                    }
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"Error parsing User JSON: {ex.Message}");
                    user = null; // Nếu JSON không hợp lệ
                }
            }
            else
            {
                user = null; // Nếu dữ liệu session trống
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWLP();

    }
    private async Task LoadWLP()
    {
        var wishlistDetails = await productvariantswishlist.GetAllPW();
        var wishlit = await wishlistServices.GetAll();
        var wishlistUser = wishlit.Where(c => c.User_id == user.Id).FirstOrDefault();
        if (wishlistUser == null)
        {
            return;
        }
        product_WL_list = wishlistDetails.Where(c => c.Wishlist_id == wishlistUser.Id).ToList();
    }

    private async Task DeleteFromWishlist(long id)
    {
        await productvariantswishlist.Delete(id);
        await LoadWLP();
    }
    private void MuaNgay(long id)
    {
        nav.NavigateTo($"/product-detail/{id}");  
    }

}
